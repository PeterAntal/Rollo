{"version":3,"sources":["../webpack/bootstrap","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","DiceModel/DiceBase.ts","DiceModel/DiceFactory.ts","../node_modules/@babel/runtime/regenerator/index.js","DiceModel/SWRPG.ts","DiceModel/index.ts","DiceModel/D2.ts","DiceModel/D3.ts","DiceModel/D4.ts","DiceModel/D6.ts","DiceModel/D8.ts","DiceModel/D10.ts","DiceModel/D20.ts","DiceModel/D100.ts","../node_modules/random-seed/index.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/json-stringify-safe/stringify.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","OperationModel/OperationFactory.ts","OperationModel/Fibonacci.ts","DiceModel/RollingModel.ts","OperationModel/DiceRollOperation.ts","OperationModel/InMemoryOperationResultCache.ts","workers/worker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","__webpack_exports__","_defineProperties","target","props","length","descriptor","configurable","writable","_createClass","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_typeof2","obj","iterator","constructor","_typeof","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_setPrototypeOf","_inherits","subClass","superClass","DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","randomSeed","options","getSides","range","NumericDice","_DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","apply","arguments","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__","set","max","getFaceCount","face","push","DiceFactory","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","diceKinds","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","dice","getKey","SWRPG_Difficulty","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","advantage","success","SWRPG_Ability","_DiceBase2","SWRPG_Proficiency","_DiceBase3","triumph","SWRPG_Challenge","_DiceBase4","despair","SWRPG_Force","_DiceBase5","force","SWRPG_Setback","_DiceBase6","SWRPG_Boost","_DiceBase7","_D2__WEBPACK_IMPORTED_MODULE_0__","_D3__WEBPACK_IMPORTED_MODULE_1__","_D4__WEBPACK_IMPORTED_MODULE_2__","_D6__WEBPACK_IMPORTED_MODULE_3__","_D8__WEBPACK_IMPORTED_MODULE_4__","_D10__WEBPACK_IMPORTED_MODULE_5__","_D20__WEBPACK_IMPORTED_MODULE_6__","_D100__WEBPACK_IMPORTED_MODULE_7__","_SWRPG__WEBPACK_IMPORTED_MODULE_8__","_DiceFactory__WEBPACK_IMPORTED_MODULE_9__","getInstance","RegisterDice","D2","D3","D6","D4","D8","D10","D20","D100","_NumericDice","stringify","Mash","data","toString","h","charCodeAt","uheprng","seed","j","Array","k","mash","Math","random","rawprng","floor","string","count","String","fromCharCode","cleanString","inStr","replace","hashString","initState","addEntropy","args","slice","hash","Date","getTime","join","done","Number","MAX_VALUE","floatBetween","min","intBetween","runtime","undefined","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","fn","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","keys","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","serializer","replacer","cycleReplacer","stack","indexOf","thisPos","splice","Infinity","spaces","JSON","getSerialize","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","OperationFactory","classCallCheck","cache","createClass","operationName","params","FibonacciOperation","iterations","getType","getParams","_runOperation","regenerator_default","a","_callee","queryResultCache","b","_context","runQuery","_x","RegisterConstructor","getDimensions","dimensions","iteration","outcomeFaces","rollOutCome","sort","localeCompare","getHistograms","outcomes","histograms","dimension","dimensionName","getHistogram","histogram","index","iterationTotal","getValuesOfDimension","faces","generateRoll","activeDice","rolls","item","roll","DiceRollOperation","Name","rollOutcomes","_index","getDice","iterationsCount","rollOutComes","InMemoryOperationResultCache","_runQuery","query","runOperation","ctx","request","response","instantiate","id","addEventListener","event","run","postMessage"],"mappings":"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","file":"35a2c29b1562ef7d61d3.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/Rollo/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import { Dice, Face } from \"./IDice\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport abstract class DiceBase implements Dice {\r\n    public abstract getKey(): string;\r\n    public abstract getName(): string;\r\n    public abstract getSides(): Face[];\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"square\";\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n\r\nexport abstract class NumericDice extends DiceBase {\r\n    public abstract getFaceCount(): number;\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [];\r\n        const max = this.getFaceCount();\r\n        for (let i = 1; i <= max; i++) {\r\n            const face = {\r\n                value: i,\r\n            } as Face;\r\n            set.push(face);\r\n        }\r\n        return set;\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { DiceConstructor, DiceKinds } from \"./IDice\";\r\n\r\n\r\nexport class DiceFactory {\r\n    private static instance: DiceFactory;\r\n    private diceKinds: DiceKinds;\r\n\r\n    private constructor() {\r\n        this.diceKinds = {};\r\n    }\r\n\r\n    static getInstance(): DiceFactory {\r\n        if (!DiceFactory.instance) {\r\n            DiceFactory.instance = new DiceFactory();\r\n        }\r\n        return DiceFactory.instance;\r\n    }\r\n\r\n    public getDice(): DiceKinds {\r\n        return this.diceKinds;\r\n    }\r\n\r\n    public RegisterDice(constructor: DiceConstructor<any>) {\r\n        const dice = new constructor();\r\n        this.diceKinds[dice.getKey()] = dice;\r\n    }\r\n}","module.exports = require(\"regenerator-runtime\");\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class SWRPG_Difficulty extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Difficulty\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Difficulty\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#8800AA\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"triangle\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {},\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Ability extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Ability\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Ability\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#00D400\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"triangle\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Proficiency extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Proficiency\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Proficiency\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#FFEA01\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                triumph: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Challenge extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Challenge\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Challenge\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"red\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {\r\n                despair: 1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Force extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Force\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Force\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#EFEFEF\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 1,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Setback extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Setback\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Setback\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Boost extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Boost\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Boost\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#ABDEF7\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { D2 } from \"./D2\";\r\nimport { D3 } from \"./D3\";\r\nimport { D4 } from \"./D4\";\r\nimport { D6 } from \"./D6\";\r\nimport { D8 } from \"./D8\";\r\nimport { D10 } from \"./D10\";\r\nimport { D20 } from \"./D20\";\r\nimport { D100 } from \"./D100\";\r\nimport {\r\n    SWRPG_Difficulty,\r\n    SWRPG_Ability,\r\n    SWRPG_Boost,\r\n    SWRPG_Challenge,\r\n    SWRPG_Force,\r\n    SWRPG_Proficiency,\r\n    SWRPG_Setback,\r\n} from \"./SWRPG\";\r\nimport { DiceFactory } from \"./DiceFactory\";\r\n\r\nexport { DiceFactory };\r\nexport * from \"./IDice\";\r\n\r\nDiceFactory.getInstance().RegisterDice(D2);\r\nDiceFactory.getInstance().RegisterDice(D3);\r\nDiceFactory.getInstance().RegisterDice(D6);\r\nDiceFactory.getInstance().RegisterDice(D4);\r\nDiceFactory.getInstance().RegisterDice(D8);\r\nDiceFactory.getInstance().RegisterDice(D10);\r\nDiceFactory.getInstance().RegisterDice(D20);\r\nDiceFactory.getInstance().RegisterDice(D100);\r\n\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Difficulty);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Ability);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Boost);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Challenge);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Force);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Proficiency);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Setback);\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class D2 extends DiceBase {\r\n    getKey(): string {\r\n        return \"D2\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Coin\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                value: 0,\r\n            },\r\n            {\r\n                value: 1,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D3 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D3\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Three Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 3;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D4 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D4\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Four Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 4;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D6 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D6\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Six Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 6;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D8 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D8\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Eight Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 8;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D10 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D10\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Ten Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 10;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D20 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D20\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Twenty Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 20;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D100 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D100\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Hundred Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 100;\r\n    }\r\n}\r\n","/*\n * random-seed\n * https://github.com/skratchdot/random-seed\n *\n * This code was originally written by Steve Gibson and can be found here:\n *\n * https://www.grc.com/otg/uheprng.htm\n *\n * It was slightly modified for use in node, to pass jshint, and a few additional\n * helper functions were added.\n *\n * Copyright (c) 2013 skratchdot\n * Dual Licensed under the MIT license and the original GRC copyright/license\n * included below.\n */\n\n/*\t============================================================================\n\t\t\t\t\t\t\t\t\tGibson Research Corporation\n\t\t\t\tUHEPRNG - Ultra High Entropy Pseudo-Random Number Generator\n\t============================================================================\n\tLICENSE AND COPYRIGHT:  THIS CODE IS HEREBY RELEASED INTO THE PUBLIC DOMAIN\n\tGibson Research Corporation releases and disclaims ALL RIGHTS AND TITLE IN\n\tTHIS CODE OR ANY DERIVATIVES. Anyone may be freely use it for any purpose.\n\t============================================================================\n\tThis is GRC's cryptographically strong PRNG (pseudo-random number generator)\n\tfor JavaScript. It is driven by 1536 bits of entropy, stored in an array of\n\t48, 32-bit JavaScript variables.  Since many applications of this generator,\n\tincluding ours with the \"Off The Grid\" Latin Square generator, may require\n\tthe deteriministic re-generation of a sequence of PRNs, this PRNG's initial\n\tentropic state can be read and written as a static whole, and incrementally\n\tevolved by pouring new source entropy into the generator's internal state.\n\t----------------------------------------------------------------------------\n\tENDLESS THANKS are due Johannes Baagoe for his careful development of highly\n\trobust JavaScript implementations of JS PRNGs.  This work was based upon his\n\tJavaScript \"Alea\" PRNG which is based upon the extremely robust Multiply-\n\tWith-Carry (MWC) PRNG invented by George Marsaglia. MWC Algorithm References:\n\thttp://www.GRC.com/otg/Marsaglia_PRNGs.pdf\n\thttp://www.GRC.com/otg/Marsaglia_MWC_Generators.pdf\n\t----------------------------------------------------------------------------\n\tThe quality of this algorithm's pseudo-random numbers have been verified by\n\tmultiple independent researchers. It handily passes the fermilab.ch tests as\n\twell as the \"diehard\" and \"dieharder\" test suites.  For individuals wishing\n\tto further verify the quality of this algorithm's pseudo-random numbers, a\n\t256-megabyte file of this algorithm's output may be downloaded from GRC.com,\n\tand a Microsoft Windows scripting host (WSH) version of this algorithm may be\n\tdownloaded and run from the Windows command prompt to generate unique files\n\tof any size:\n\tThe Fermilab \"ENT\" tests: http://fourmilab.ch/random/\n\tThe 256-megabyte sample PRN file at GRC: https://www.GRC.com/otg/uheprng.bin\n\tThe Windows scripting host version: https://www.GRC.com/otg/wsh-uheprng.js\n\t----------------------------------------------------------------------------\n\tQualifying MWC multipliers are: 187884, 686118, 898134, 1104375, 1250205,\n\t1460910 and 1768863. (We use the largest one that's < 2^21)\n\t============================================================================ */\n'use strict';\n\nvar stringify = require('json-stringify-safe');\n/*\t============================================================================\nThis is based upon Johannes Baagoe's carefully designed and efficient hash\nfunction for use with JavaScript.  It has a proven \"avalanche\" effect such\nthat every bit of the input affects every bit of the output 50% of the time,\nwhich is good.\tSee: http://baagoe.com/en/RandomMusings/hash/avalanche.xhtml\n============================================================================\n*/\n\n\nvar Mash = function Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function mash(data) {\n    if (data) {\n      data = data.toString();\n\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    } else {\n      n = 0xefc8249d;\n    }\n  };\n\n  return mash;\n};\n\nvar uheprng = function uheprng(seed) {\n  return function () {\n    var o = 48; // set the 'order' number of ENTROPY-holding 32-bit values\n\n    var c = 1; // init the 'carry' used by the multiply-with-carry (MWC) algorithm\n\n    var p = o; // init the 'phase' (max-1) of the intermediate variable pointer\n\n    var s = new Array(o); // declare our intermediate variables array\n\n    var i; // general purpose local\n\n    var j; // general purpose local\n\n    var k = 0; // general purpose local\n    // when our \"uheprng\" is initially invoked our PRNG state is initialized from the\n    // browser's own local PRNG. This is okay since although its generator might not\n    // be wonderful, it's useful for establishing large startup entropy for our usage.\n\n    var mash = new Mash(); // get a pointer to our high-performance \"Mash\" hash\n    // fill the array with initial mash hash values\n\n    for (i = 0; i < o; i++) {\n      s[i] = mash(Math.random());\n    } // this PRIVATE (internal access only) function is the heart of the multiply-with-carry\n    // (MWC) PRNG algorithm. When called it returns a pseudo-random number in the form of a\n    // 32-bit JavaScript fraction (0.0 to <1.0) it is a PRIVATE function used by the default\n    // [0-1] return function, and by the random 'string(n)' function which returns 'n'\n    // characters from 33 to 126.\n\n\n    var rawprng = function rawprng() {\n      if (++p >= o) {\n        p = 0;\n      }\n\n      var t = 1768863 * s[p] + c * 2.3283064365386963e-10; // 2^-32\n\n      return s[p] = t - (c = t | 0);\n    }; // this EXPORTED function is the default function returned by this library.\n    // The values returned are integers in the range from 0 to range-1. We first\n    // obtain two 32-bit fractions (from rawprng) to synthesize a single high\n    // resolution 53-bit prng (0 to <1), then we multiply this by the caller's\n    // \"range\" param and take the \"floor\" to return a equally probable integer.\n\n\n    var random = function random(range) {\n      return Math.floor(range * (rawprng() + (rawprng() * 0x200000 | 0) * 1.1102230246251565e-16)); // 2^-53\n    }; // this EXPORTED function 'string(n)' returns a pseudo-random string of\n    // 'n' printable characters ranging from chr(33) to chr(126) inclusive.\n\n\n    random.string = function (count) {\n      var i;\n      var s = '';\n\n      for (i = 0; i < count; i++) {\n        s += String.fromCharCode(33 + random(94));\n      }\n\n      return s;\n    }; // this PRIVATE \"hash\" function is used to evolve the generator's internal\n    // entropy state. It is also called by the EXPORTED addEntropy() function\n    // which is used to pour entropy into the PRNG.\n\n\n    var hash = function hash() {\n      var args = Array.prototype.slice.call(arguments);\n\n      for (i = 0; i < args.length; i++) {\n        for (j = 0; j < o; j++) {\n          s[j] -= mash(args[i]);\n\n          if (s[j] < 0) {\n            s[j] += 1;\n          }\n        }\n      }\n    }; // this EXPORTED \"clean string\" function removes leading and trailing spaces and non-printing\n    // control characters, including any embedded carriage-return (CR) and line-feed (LF) characters,\n    // from any string it is handed. this is also used by the 'hashstring' function (below) to help\n    // users always obtain the same EFFECTIVE uheprng seeding key.\n\n\n    random.cleanString = function (inStr) {\n      inStr = inStr.replace(/(^\\s*)|(\\s*$)/gi, ''); // remove any/all leading spaces\n\n      inStr = inStr.replace(/[\\x00-\\x1F]/gi, ''); // remove any/all control characters\n\n      inStr = inStr.replace(/\\n /, '\\n'); // remove any/all trailing spaces\n\n      return inStr; // return the cleaned up result\n    }; // this EXPORTED \"hash string\" function hashes the provided character string after first removing\n    // any leading or trailing spaces and ignoring any embedded carriage returns (CR) or Line Feeds (LF)\n\n\n    random.hashString = function (inStr) {\n      inStr = random.cleanString(inStr);\n      mash(inStr); // use the string to evolve the 'mash' state\n\n      for (i = 0; i < inStr.length; i++) {\n        // scan through the characters in our string\n        k = inStr.charCodeAt(i); // get the character code at the location\n\n        for (j = 0; j < o; j++) {\n          //\t\"mash\" it into the UHEPRNG state\n          s[j] -= mash(k);\n\n          if (s[j] < 0) {\n            s[j] += 1;\n          }\n        }\n      }\n    }; // this EXPORTED function allows you to seed the random generator.\n\n\n    random.seed = function (seed) {\n      if (typeof seed === 'undefined' || seed === null) {\n        seed = Math.random();\n      }\n\n      if (typeof seed !== 'string') {\n        seed = stringify(seed, function (key, value) {\n          if (typeof value === 'function') {\n            return value.toString();\n          }\n\n          return value;\n        });\n      }\n\n      random.initState();\n      random.hashString(seed);\n    }; // this handy exported function is used to add entropy to our uheprng at any time\n\n\n    random.addEntropy = function ()\n    /* accept zero or more arguments */\n    {\n      var args = [];\n\n      for (i = 0; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n\n      hash(k++ + new Date().getTime() + args.join('') + Math.random());\n    }; // if we want to provide a deterministic startup context for our PRNG,\n    // but without directly setting the internal state variables, this allows\n    // us to initialize the mash hash and PRNG's internal state before providing\n    // some hashing input\n\n\n    random.initState = function () {\n      mash(); // pass a null arg to force mash hash to init\n\n      for (i = 0; i < o; i++) {\n        s[i] = mash(' '); // fill the array with initial mash hash values\n      }\n\n      c = 1; // init our multiply-with-carry carry\n\n      p = o; // init our phase\n    }; // we use this (optional) exported function to signal the JavaScript interpreter\n    // that we're finished using the \"Mash\" hash function so that it can free up the\n    // local \"instance variables\" is will have been maintaining.  It's not strictly\n    // necessary, of course, but it's good JavaScript citizenship.\n\n\n    random.done = function () {\n      mash = null;\n    }; // if we called \"uheprng\" with a seed value, then execute random.seed() before returning\n\n\n    if (typeof seed !== 'undefined') {\n      random.seed(seed);\n    } // Returns a random integer between 0 (inclusive) and range (exclusive)\n\n\n    random.range = function (range) {\n      return random(range);\n    }; // Returns a random float between 0 (inclusive) and 1 (exclusive)\n\n\n    random.random = function () {\n      return random(Number.MAX_VALUE - 1) / Number.MAX_VALUE;\n    }; // Returns a random float between min (inclusive) and max (exclusive)\n\n\n    random.floatBetween = function (min, max) {\n      return random.random() * (max - min) + min;\n    }; // Returns a random integer between min (inclusive) and max (inclusive)\n\n\n    random.intBetween = function (min, max) {\n      return Math.floor(random.random() * (max - min + 1)) + min;\n    }; // when our main outer \"uheprng\" function is called, after setting up our\n    // initial variables and entropic state, we return an \"instance pointer\"\n    // to the internal anonymous function which can then be used to access\n    // the uheprng's various exported functions.  As with the \".done\" function\n    // above, we should set the returned value to 'null' once we're finished\n    // using any of these functions.\n\n\n    return random;\n  }();\n}; // Modification for use in node:\n\n\nuheprng.create = function (seed) {\n  return new uheprng(seed);\n};\n\nmodule.exports = uheprng;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar runtime = function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n    return generator;\n  }\n\n  exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n\n  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n\n  function Generator() {}\n\n  function GeneratorFunction() {}\n\n  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n\n\n  var IteratorPrototype = {};\n\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\"; // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      prototype[method] = function (arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function (genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n    // do is to check its .name property.\n    (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n  };\n\n  exports.mark = function (genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  }; // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n\n\n  exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n\n        if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function (value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function (err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function (unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function (error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function (resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise = // If enqueue has been called before, then we want to wait until\n      // all previous Promises have been resolved before calling invoke,\n      // so that results are always delivered in the correct order. If\n      // enqueue has not been called before, then it is important to\n      // call invoke immediately, without waiting on a callback to fire,\n      // so that the async generator function has the opportunity to do\n      // any necessary setup in a predictable way. This predictability\n      // is why the Promise constructor synchronously invokes its\n      // executor callback, and why async functions synchronously\n      // execute code before the first await. Since we implement simple\n      // async functions in terms of async generators, it is especially\n      // important to get this right, even though it requires care.\n      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n      // invocations of the iterator.\n      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n    } // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n\n\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n\n  exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n\n  exports.async = function (innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n    return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n    : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        } // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n        var record = tryCatch(innerFn, self, context);\n\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted; // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  } // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (!info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n      context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    } // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n\n\n    context.delegate = null;\n    return ContinueSentinel;\n  } // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n\n\n  defineIteratorMethods(Gp);\n  Gp[toStringTagSymbol] = \"Generator\"; // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n  Gp[iteratorSymbol] = function () {\n    return this;\n  };\n\n  Gp.toString = function () {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function (object) {\n    var keys = [];\n\n    for (var key in object) {\n      keys.push(key);\n    }\n\n    keys.reverse(); // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      } // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n\n\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n            next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n          return next;\n        };\n\n        return next.next = next;\n      }\n    } // Return an iterator with no values.\n\n\n    return {\n      next: doneResult\n    };\n  }\n\n  exports.values = values;\n\n  function doneResult() {\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      this.prev = 0;\n      this.next = 0; // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n      this.method = \"next\";\n      this.arg = undefined;\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n    stop: function stop() {\n      this.done = true;\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" || record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n\n          return thrown;\n        }\n      } // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n\n\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  }; // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n\n  return exports;\n}( // If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\ntypeof module === \"object\" ? module.exports : {});\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}","exports = module.exports = stringify;\nexports.getSerialize = serializer;\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [],\n      keys = [];\n  if (cycleReplacer == null) cycleReplacer = function cycleReplacer(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\";\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n  };\n  return function (key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);\n    } else stack.push(value);\n\n    return replacer == null ? value : replacer.call(this, key, value);\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { CacheableOperation } from \"./ResultCache\";\r\n\r\nexport interface OperationConstructor<T, K> {\r\n  new (params: K): T;\r\n}\r\n\r\nexport class OperationFactory {\r\n  private cache: { [key: string]: OperationConstructor<any, any> };\r\n  private static instance: OperationFactory;\r\n  constructor() {\r\n    this.cache = {};\r\n  }\r\n\r\n  public static getInstance(): OperationFactory {\r\n    if (OperationFactory.instance) {\r\n      return OperationFactory.instance;\r\n    } else {\r\n      OperationFactory.instance = new OperationFactory();\r\n      return OperationFactory.instance;\r\n    }\r\n  }\r\n\r\n  public RegisterConstructor(\r\n    operationName: string,\r\n    constructor: OperationConstructor<any, any>\r\n  ): void {\r\n    this.cache[operationName] = constructor;\r\n  }\r\n\r\n  public getConstructor(operationName: string): OperationConstructor<any, any> {\r\n    return this.cache[operationName];\r\n  }\r\n\r\n  public instantiate<K>(\r\n    operationName: string,\r\n    params: K\r\n  ): CacheableOperation<any, K> {\r\n    return new this.cache[operationName](params);\r\n  }\r\n}\r\n","import { CacheableOperation, OperationResultCache } from \"./ResultCache\";\r\nimport { OperationFactory } from \"./OperationFactory\";\r\n\r\nexport interface FibonacciParams {\r\n    iterations: number;\r\n}\r\n\r\nexport class FibonacciOperation\r\n    implements CacheableOperation<number, FibonacciParams> {\r\n    private iterations: number;\r\n\r\n    public constructor(params: FibonacciParams) {\r\n        this.iterations = params.iterations;\r\n    }\r\n\r\n    public getKey() {\r\n        return this.getType() + JSON.stringify(this.getParams());\r\n    }\r\n    public getType(): string {\r\n        return \"FibonacciOperation\";\r\n    }\r\n\r\n    public getParams(): FibonacciParams {\r\n        return { iterations: this.iterations };\r\n    }\r\n\r\n    async runOperation(\r\n        queryResultCache: OperationResultCache\r\n    ): Promise<number> {\r\n        let result;\r\n        if (this.iterations === 0 || this.iterations === 1) {\r\n            result = 1;\r\n        } else {\r\n            const a = await queryResultCache.runQuery(\r\n                new FibonacciOperation({ iterations: this.iterations - 1 })\r\n            );\r\n            const b = await queryResultCache.runQuery(\r\n                new FibonacciOperation({ iterations: this.iterations - 2 })\r\n            );\r\n            result = a + b;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nOperationFactory.getInstance().RegisterConstructor(\r\n    \"FibonacciOperation\",\r\n    FibonacciOperation\r\n);\r\n","import { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport interface RollOutcome {\r\n    rollOutCome: Face[];\r\n}\r\n\r\nexport interface Histogram {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\nexport function getDimensions(iterations: RollOutcome[]): string[] {\r\n    const dimensions: string[] = [];\r\n    for (let iteration = 0; iteration < iterations.length; iteration++) {\r\n        const outcomeFaces = iterations[iteration].rollOutCome;\r\n        for (let face = 0; face < outcomeFaces.length; face++) {\r\n            for (const key in outcomeFaces[face]) {\r\n                if (outcomeFaces[face].hasOwnProperty(key)) {\r\n                    if (dimensions.indexOf(key) === -1) {\r\n                        dimensions.push(key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return dimensions.sort((a: string, b: string) => {\r\n        return a.localeCompare(b);\r\n    });\r\n}\r\n\r\nexport function getHistograms(\r\n    outcomes: RollOutcome[],\r\n    dimensions: string[]\r\n): Histogram[] {\r\n    const histograms = [];\r\n    for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n        const dimensionName = dimensions[dimension];\r\n        histograms.push({\r\n            name: dimensionName,\r\n            data: getHistogram(outcomes, dimensionName),\r\n        });\r\n    }\r\n    return histograms;\r\n}\r\n\r\nexport function getHistogram(\r\n    iterations: RollOutcome[],\r\n    dimension: string\r\n): number[] {\r\n    let histogram: number[] = [];\r\n\r\n    for (let index = 0; index < iterations.length; index++) {\r\n        const faces = iterations[index].rollOutCome;\r\n        let iterationTotal = getValuesOfDimension(faces, dimension);\r\n\r\n        if (histogram[iterationTotal] == null) {\r\n            histogram[iterationTotal] = 1;\r\n        } else {\r\n            histogram[iterationTotal]++;\r\n        }\r\n    }\r\n    return histogram;\r\n}\r\n\r\nexport function getValuesOfDimension(faces: Face[], dimension: string) {\r\n    let iterationTotal = 0;\r\n    for (let face = 0; face < faces.length; face++) {\r\n        const result = faces[face][dimension];\r\n        if (result != null) {\r\n            iterationTotal += result != null ? result : 0;\r\n        }\r\n    }\r\n    return iterationTotal;\r\n}\r\n\r\nexport function generateRoll(\r\n    activeDice: Dice[],\r\n    randomSeed: RandomSeed\r\n): Face[] {\r\n    const rolls: any[] = [];\r\n    activeDice.forEach((item, index) => {\r\n        rolls.push(item.roll(randomSeed));\r\n    });\r\n    return rolls;\r\n}\r\n","import { OperationFactory } from \"./OperationFactory\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DiceFactory } from \"../DiceModel/index\";\r\nimport {\r\n    Histogram,\r\n    RollOutcome,\r\n    generateRoll,\r\n    getDimensions,\r\n    getHistograms,\r\n} from \"../DiceModel/RollingModel\";\r\nimport { CacheableOperation, OperationResultCache } from \"./ResultCache\";\r\nimport { create } from \"random-seed\";\r\n\r\nexport interface DiceRollOutcome {\r\n    dimensions: string[];\r\n    histograms: Histogram[];\r\n    rollOutComes: RollOutcome[];\r\n}\r\n\r\nexport interface DiceRollParams {\r\n    diceKinds: string[];\r\n    iterationsCount: number;\r\n    randomSeed: string;\r\n}\r\n\r\nexport class DiceRollOperation\r\n    implements CacheableOperation<DiceRollOutcome, DiceRollParams> {\r\n    private params: DiceRollParams;\r\n    public static Name = \"DiceRollOperation\";\r\n\r\n    public constructor(params: DiceRollParams) {\r\n        this.params = params;\r\n    }\r\n\r\n    public getKey() {\r\n        return this.getType() + JSON.stringify(this.getParams());\r\n    }\r\n    public getType(): string {\r\n        return DiceRollOperation.Name;\r\n    }\r\n\r\n    public getParams(): DiceRollParams {\r\n        return this.params;\r\n    }\r\n\r\n    async runOperation(\r\n        queryResultCache: OperationResultCache\r\n    ): Promise<DiceRollOutcome> {\r\n        const rollOutcomes: RollOutcome[] = [];\r\n\r\n        const randomSeed = create(this.params.randomSeed);\r\n        const dice: Dice[] = [];\r\n        const diceKinds = DiceFactory.getInstance().getDice();\r\n        if (this.params.diceKinds.length > 0) {\r\n            for (let index = 0; index < this.params.diceKinds.length; index++) {\r\n                dice.push(diceKinds[this.params.diceKinds[index]]);\r\n            }\r\n            for (let index = 0; index < this.params.iterationsCount; index++) {\r\n                const rollOutCome = generateRoll(dice, randomSeed);\r\n                rollOutcomes[index] = {\r\n                    rollOutCome: rollOutCome,\r\n                };\r\n            }\r\n        }\r\n\r\n        const dimensions = getDimensions(rollOutcomes);\r\n        const histograms = getHistograms(rollOutcomes, dimensions);\r\n        return {\r\n            dimensions: dimensions,\r\n            histograms: histograms,\r\n            rollOutComes: rollOutcomes,\r\n        };\r\n    }\r\n}\r\n\r\nOperationFactory.getInstance().RegisterConstructor(\r\n    DiceRollOperation.Name,\r\n    DiceRollOperation\r\n);\r\n","import { OperationResultCache, CacheableOperation } from \"./ResultCache\";\r\n\r\ninterface OperationDescription<T> {\r\n  result: T;\r\n  resultPromise: Promise<T>;\r\n}\r\n\r\nexport class InMemoryOperationResultCache implements OperationResultCache {\r\n  private cache: { [key: string]: Promise<any> };\r\n  public constructor() {\r\n    this.cache = {};\r\n  }\r\n\r\n  public async runQuery<T, K>(query: CacheableOperation<T, K>): Promise<T> {\r\n    const key = query.getKey();\r\n    let result: Promise<T>;\r\n    if (this.cache[key]) {\r\n      result = this.cache[key];\r\n    } else {\r\n      result = query.runOperation(this);\r\n      this.cache[key] = result;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import \"../OperationModel/Fibonacci\";\r\nimport \"../OperationModel/DiceRollOperation\";\r\nimport { InMemoryOperationResultCache } from \"../OperationModel/InMemoryOperationResultCache\";\r\nimport { OperationFactory } from \"../OperationModel/OperationFactory\";\r\nimport { workerResponse, workerRequest } from \"./contracts\";\r\n\r\n// Worker.ts\r\nconst ctx: Worker = self as any; // eslint-disable-line no-restricted-globals\r\n\r\nasync function run(request: workerRequest): Promise<workerResponse> {\r\n    const cache = new InMemoryOperationResultCache();\r\n\r\n    const query = OperationFactory.getInstance().instantiate(\r\n        request.type,\r\n        request.params\r\n    );\r\n    const result = await cache.runQuery(query);\r\n    // Post data to parent thread\r\n    const response: workerResponse = {\r\n        id: request.id,\r\n        type: request.type,\r\n        result: JSON.stringify(result),\r\n    };\r\n\r\n    return response;\r\n}\r\n\r\n// Respond to message from parent thread\r\nctx.addEventListener(\"message\", event => {\r\n    const dataset = event.data as workerRequest;\r\n    run(dataset).then((response: any) => {\r\n        ctx.postMessage(response);\r\n    });\r\n});\r\n"],"sourceRoot":""}