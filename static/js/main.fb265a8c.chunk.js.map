{"version":3,"sources":["DiceModel/D6.ts","DiceModel/D8.ts","DiceModel/D10.ts","DiceModel/D20.ts","DiceModel/D100.ts","DiceModel/SWRPG.ts","DiceModel/DiceBase.ts","DiceModel/DiceFactory.ts","UI/DicePicker.tsx","UI/DiceComponent.tsx","UI/DicePool.tsx","DiceModel/SWRPG-common.ts","UI/DiceResult.tsx","UI/DiceRoll.tsx","UI/HistogramChart.tsx","UI/ProbabilitiesView.tsx","UI/View.tsx","App.tsx","serviceWorker.ts","index.tsx","DiceModel/index.ts","DiceModel/D2.ts","DiceModel/D3.ts","DiceModel/D4.ts"],"names":["D6","_NumericDice","Object","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","NumericDice","D8","D10","D20","D100","SWRPG_Purple","_DiceBase","disadvantage","fail","DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","randomSeed","options","getSides","range","length","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__","set","max","getFaceCount","i","face","push","DiceFactory","diceKinds","constructor","dice","getKey","instance","DiceCombo","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","concat","onChange","event","option","index","props","onSelect","inherits","createClass","diceOptions","renderDiceOptions","react_default","a","createElement","ComboBox","selectedKey","selected","results","hasOwnProperty","text","React","Component","DicePicker","_React$Component2","_this2","onClick","onAdd","state","setState","getInstance","getDice","keys","className","DicePicker_DiceCombo","Button","label","disabled","DiceComponent","remove","theme","getTheme","getName","IconButton","styles","root","color","palette","blue","background","whiteTranslucent40","rootHovered","white","themeDarkAlt","iconProps","iconName","DicePool","content","activeDice","forEach","item","DiceComponent_DiceComponent","onRemove","glyphs","mapGlyph","identifier","count","glyph","repeat","toString","DiceResult","DiceRoll","DiceResult_DiceResult","rollDice","HistogramChart","labels","datasets","values","accum","accumulator","items","iterations","data","yAxisID","backgroundColor","borderColor","type","style","height","es","maintainAspectRatio","scales","yAxes","id","position","ticks","min","ProbabilitiesView","regenerate","histograms","name","newProps","Fragment","renderCharts","PrimaryButton","elements","element","HistogramChart_HistogramChart","rollOutCome","generateRoll","dimensions","getDimensions","getHistograms","iteration","outcomeFaces","indexOf","outcomes","dimension","dimensionName","getHistogram","histogram","diceRolls","iterationTotal","result","rolls","roll","View","onAddDice","onRemoveDice","splice","create","DicePicker_DicePicker","DicePool_DicePool","DiceRoll_DiceRoll","ProbabilitiesView_ProbabilitiesView","App","View_View","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_D2__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_D3__WEBPACK_IMPORTED_MODULE_1__","_D4__WEBPACK_IMPORTED_MODULE_2__","_D6__WEBPACK_IMPORTED_MODULE_3__","_D8__WEBPACK_IMPORTED_MODULE_4__","_D10__WEBPACK_IMPORTED_MODULE_5__","_D20__WEBPACK_IMPORTED_MODULE_6__","_D100__WEBPACK_IMPORTED_MODULE_7__","_SWRPG__WEBPACK_IMPORTED_MODULE_8__","_DiceFactory__WEBPACK_IMPORTED_MODULE_9__","d","__webpack_exports__","RegisterDice","D2","D3","D4","number"],"mappings":"iKAEaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,MAAO,OAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,kBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,MAVfZ,EAAA,OAAwBa,4GCAXC,EAAb,SAAAb,GAAA,SAAAa,IAAA,OAAAZ,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,GAAAZ,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAY,EAAAb,GAAAC,OAAAQ,EAAA,EAAAR,CAAAY,EAAA,EAAAH,IAAA,SAAAC,MAAA,WAEQ,MAAO,OAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,oBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,MAVfE,EAAA,OAAwBD,4GCAXE,EAAb,SAAAd,GAAA,SAAAc,IAAA,OAAAb,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,GAAAb,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAa,EAAAd,GAAAC,OAAAQ,EAAA,EAAAR,CAAAa,EAAA,EAAAJ,IAAA,SAAAC,MAAA,WAEQ,MAAO,QAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,kBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,OAVfG,EAAA,OAAyBF,4GCAZG,EAAb,SAAAf,GAAA,SAAAe,IAAA,OAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,GAAAd,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAc,GAAAT,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAc,EAAAf,GAAAC,OAAAQ,EAAA,EAAAR,CAAAc,EAAA,EAAAL,IAAA,SAAAC,MAAA,WAEQ,MAAO,QAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,qBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,OAVfI,EAAA,OAAyBH,4GCAZI,EAAb,SAAAhB,GAAA,SAAAgB,IAAA,OAAAf,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,GAAAf,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAe,GAAAV,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAe,EAAAhB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAe,EAAA,EAAAN,IAAA,SAAAC,MAAA,WAEQ,MAAO,SAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,sBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,QAVfK,EAAA,OAA0BJ,4GCEbK,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAhB,OAAAC,EAAA,EAAAD,CAAAE,KAAAc,GAAAhB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgB,GAAAX,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAgB,EAAAC,GAAAjB,OAAAQ,EAAA,EAAAR,CAAAgB,EAAA,EAAAP,IAAA,SAAAC,MAAA,WAEQ,MAAO,iBAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,iBANf,CAAAD,IAAA,WAAAC,MAAA,WAmCQ,MAzBoB,CAChB,CACIQ,aAAc,GAElB,CACIA,aAAc,GAElB,CACIA,aAAc,GAElB,GACA,CACIC,KAAM,GAEV,CACID,aAAc,EACdC,KAAM,GAEV,CACID,aAAc,GAElB,CACIC,KAAM,QAhCtBH,EAAA,OAAkCI,+RCDZA,EAAtB,oBAAAA,IAAApB,OAAAqB,EAAA,EAAArB,CAAAE,KAAAkB,GAAA,OAAApB,OAAAsB,EAAA,EAAAtB,CAAAoB,EAAA,EAAAX,IAAA,OAAAC,MAAA,SAKgBa,GACR,IAAMC,EAAUtB,KAAKuB,WAErB,OAAOD,EADWD,EAAWG,MAAMF,EAAQG,aAPnDP,EAAA,GAYsBT,EAAtB,SAAAM,GAAA,SAAAN,IAAA,OAAAX,OAAAqB,EAAA,EAAArB,CAAAE,KAAAS,GAAAX,OAAA4B,EAAA,EAAA5B,CAAAE,KAAAF,OAAA6B,EAAA,EAAA7B,CAAAW,GAAAN,MAAAH,KAAAI,YAAA,OAAAN,OAAA8B,EAAA,EAAA9B,CAAAW,EAAAM,GAAAjB,OAAAsB,EAAA,EAAAtB,CAAAW,EAAA,EAAAF,IAAA,WAAAC,MAAA,WAMQ,IAFA,IAAMqB,EAAc,GACdC,EAAM9B,KAAK+B,eACRC,EAAI,EAAGA,GAAKF,EAAKE,IAAK,CAC3B,IAAMC,EAAO,CACTzB,MAAOwB,GAEXH,EAAIK,KAAKD,GAEb,OAAOJ,IAZf,CAAAtB,IAAA,OAAAC,MAAA,SAegBa,GACR,IAAMC,EAAUtB,KAAKuB,WAErB,OAAOD,EADWD,EAAWG,MAAMF,EAAQG,aAjBnDhB,EAAA,CAA0CS,4GCZ7BiB,EAAb,WAII,SAAAA,IAAuBrC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,GAAAnC,KAFfoC,eAEc,EAClBpC,KAAKoC,UAAY,GALzB,OAAAtC,OAAAQ,EAAA,EAAAR,CAAAqC,EAAA,EAAA5B,IAAA,UAAAC,MAAA,WAgBQ,OAAOR,KAAKoC,YAhBpB,CAAA7B,IAAA,eAAAC,MAAA,SAmBwB6B,GAChB,IAAMC,EAAO,IAAID,EACjBrC,KAAKoC,UAAUE,EAAKC,UAAYD,KArBxC,EAAA/B,IAAA,cAAAC,MAAA,WAYQ,OAHK2B,EAAYK,WACbL,EAAYK,SAAW,IAAIL,GAExBA,EAAYK,aAZ3BL,EAAA,GAAaA,EACMK,kLCYNC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAA9C,OAAA+C,EAAA,EAAA/C,CAAAE,KAAAyC,GAAA,QAAAK,EAAA1C,UAAAqB,OAAAsB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA7C,UAAA6C,GAAA,OAAAL,EAAA9C,OAAAoD,EAAA,EAAApD,CAAAE,MAAA2C,EAAA7C,OAAAqD,EAAA,EAAArD,CAAA2C,IAAAW,KAAAjD,MAAAwC,EAAA,CAAA3C,MAAAqD,OAAAN,MA0BYO,SAAW,SACfC,EACAC,EACAC,EACAjD,GAEAoC,EAAKc,MAAMC,SAASf,EAAKc,MAAMtB,UAAUoB,EAAQjD,OAhCzDqC,EAAA,OAAA9C,OAAA8D,EAAA,EAAA9D,CAAA2C,EAAAC,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAA2C,EAAA,EAAAlC,IAAA,SAAAC,MAAA,WAEQ,IAAMsD,EAAc9D,KAAK+D,oBACzB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACI7C,QAASwC,EACTM,YACIpE,KAAK0D,MAAMW,UAAYrE,KAAK0D,MAAMW,SAAS9B,SAE/Ce,SAAUtD,KAAKsD,aAT/B,CAAA/C,IAAA,oBAAAC,MAAA,WAcQ,IAAM8D,EAAU,GAChB,IAAK,IAAM/D,KAAOP,KAAK0D,MAAMtB,UACrBpC,KAAK0D,MAAMtB,UAAUmC,eAAehE,IACpC+D,EAAQpC,KAAK,CACT3B,IAAKA,EACLiE,KAAMjE,IAIlB,OAAO+D,MAvBf7B,EAAA,CAA+BgC,IAAMC,WA4CxBC,EAAb,SAAAC,GAII,SAAAD,EAAYjB,GAAsB,IAAAmB,EAAA/E,OAAA+C,EAAA,EAAA/C,CAAAE,KAAA2E,IAC9BE,EAAA/E,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAA6E,GAAAvB,KAAApD,KAAM0D,KA0BHoB,QAAU,WACbD,EAAKnB,MAAMqB,MAAMF,EAAKG,MAAMX,WA5BEQ,EA8B3BlB,SAAW,SAACrB,GACfuC,EAAKI,SAAS,CAAEZ,SAAU/B,KA7B1B,IAAMA,EAAOH,cAAY+C,cAAcC,UAFT,OAG9BN,EAAKG,MAAQ,CACT1C,KAAMA,EACN+B,SAAU/B,EAAKxC,OAAOsF,KAAK9C,GAAM,KALPuC,EAJtC,OAAA/E,OAAA8D,EAAA,EAAA9D,CAAA6E,EAAAC,GAAA9E,OAAA+D,EAAA,EAAA/D,CAAA6E,EAAA,EAAApE,IAAA,SAAAC,MAAA,WAcQ,OACIwD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,mBACXrB,EAAAC,EAAAC,cAACoB,EAAD,CACIlD,UAAWpC,KAAKgF,MAAM1C,KACtB+B,SAAUrE,KAAKgF,MAAMX,SACrBV,SAAU3D,KAAK2D,WAEnBK,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CACIC,MAAM,YACNhB,KAAK,MACLM,QAAS9E,KAAK8E,QACdW,SAAiC,MAAvBzF,KAAKgF,MAAMX,gBAzBzCM,EAAA,CAAgCF,IAAMC,2BClDzBgB,EAAb,SAAAhD,GAAA,SAAAgD,IAAA,IAAA/C,EAAAC,EAAA9C,OAAA+C,EAAA,EAAA/C,CAAAE,KAAA0F,GAAA,QAAA5C,EAAA1C,UAAAqB,OAAAsB,EAAA,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAAF,EAAAE,GAAA7C,UAAA6C,GAAA,OAAAL,EAAA9C,OAAAoD,EAAA,EAAApD,CAAAE,MAAA2C,EAAA7C,OAAAqD,EAAA,EAAArD,CAAA4F,IAAAtC,KAAAjD,MAAAwC,EAAA,CAAA3C,MAAAqD,OAAAN,MA0BY+B,QAAU,WACdlC,EAAKc,MAAMiC,OAAO/C,EAAKc,MAAMD,QA3BrCb,EAAA,OAAA9C,OAAA8D,EAAA,EAAA9D,CAAA4F,EAAAhD,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAA4F,EAAA,EAAAnF,IAAA,SAAAC,MAAA,WAEQ,IAAMoF,EAAQC,cACd,OACI7B,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBACVrF,KAAK0D,MAAMpB,KAAKwD,UACjB9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACIvB,KAAK,SACLM,QAAS9E,KAAK8E,QACdkB,OAAQ,CACJC,KAAM,CACFC,MAAON,EAAMO,QAAQC,KACrBC,WAAYT,EAAMO,QAAQG,oBAE9BC,YAAa,CACTL,MAAON,EAAMO,QAAQK,MACrBH,WAAYT,EAAMO,QAAQM,eAGlCC,UAAW,CACPC,SAAU,iBApBlCjB,EAAA,CAAmCjB,IAAMC,WCD5BkC,UAAb,SAAAlE,GAAA,SAAAkE,IAAA,OAAA9G,OAAA+C,EAAA,EAAA/C,CAAAE,KAAA4G,GAAA9G,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAA8G,GAAAzG,MAAAH,KAAAI,YAAA,OAAAN,OAAA8D,EAAA,EAAA9D,CAAA8G,EAAAlE,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAA8G,EAAA,EAAArG,IAAA,SAAAC,MAAA,WACiC,IAAAoC,EAAA5C,KACnB6G,EAAyB,GAW/B,OAVA7G,KAAK0D,MAAMoD,WAAWC,QAAQ,SAACC,EAAMvD,GACjCoD,EAAQ3E,KACJ8B,EAAAC,EAAAC,cAAC+C,EAAD,CACI3E,KAAM0E,EACNzG,IAAKkD,EACLA,MAAOA,EACPkC,OAAQ/C,EAAKc,MAAMwD,cAIxBlD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,sBAAf,IAAsCwB,OAbrDD,EAAA,CAA8BnC,IAAMC,YCL9ByC,EAAoC,GAKnC,SAASC,EAASC,EAAoBC,GACzC,IAAMC,EAAQJ,EAAOE,GACrB,OAAgB,MAATE,EAAgBA,EAAMC,OAAOF,GAASA,EAAMG,WANvDN,EAAM,aAAiB,IACvBA,EAAM,OAAW,GACjBA,EAAM,KAAS,eCCFO,EAAb,SAAAhF,GAAA,SAAAgF,IAAA,OAAA5H,OAAA+C,EAAA,EAAA/C,CAAAE,KAAA0H,GAAA5H,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAA4H,GAAAvH,MAAAH,KAAAI,YAAA,OAAAN,OAAA8D,EAAA,EAAA9D,CAAA4H,EAAAhF,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAA4H,EAAA,EAAAnH,IAAA,SAAAC,MAAA,WAEQ,IAAM8D,EAAU,GAChB,IAAK,IAAM/D,KAAOP,KAAK0D,MAAMmD,QACzB,GAAI7G,KAAK0D,MAAMmD,QAAQtC,eAAehE,GAAM,CACxC,IAAM+G,EAAQtH,KAAK0D,MAAMmD,QAAQtG,GACjC+D,EAAQpC,KACJ8B,EAAAC,EAAAC,cAAA,QAAM3D,IAAKA,EAAK8E,UAAU,SACrB+B,EAAS7G,EAAK+G,KAK/B,OAAOtD,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,eAAef,OAb7CoD,EAAA,CAAgCjD,IAAMC,WCEzBiD,UAAb,SAAAjF,GAAA,SAAAiF,IAAA,OAAA7H,OAAA+C,EAAA,EAAA/C,CAAAE,KAAA2H,GAAA7H,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAA6H,GAAAxH,MAAAH,KAAAI,YAAA,OAAAN,OAAA8D,EAAA,EAAA9D,CAAA6H,EAAAjF,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAA6H,EAAA,EAAApH,IAAA,SAAAC,MAAA,WACiC,IAAAoC,EAAA5C,KACnB6G,EAAyB,GAM/B,OALA7G,KAAK0D,MAAMoD,WAAWC,QAAQ,SAACzE,EAAMmB,GACjCoD,EAAQ3E,KACJ8B,EAAAC,EAAAC,cAAC0D,EAAD,CAAYf,QAASjE,EAAKiF,SAASvF,GAAO/B,IAAKkD,OAGhDO,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,sBAAsBwB,KARpD,CAAAtG,IAAA,WAAAC,MAAA,SAWqB8B,GACb,IAAMhB,EAAUgB,EAAKf,WAErB,OAAOD,EADWtB,KAAK0D,MAAMrC,WAAWG,MAAMF,EAAQG,aAb9DkG,EAAA,CAA8BlD,IAAMC,8BCHvBoD,EAAb,SAAApF,GAAA,SAAAoF,IAAA,OAAAhI,OAAA+C,EAAA,EAAA/C,CAAAE,KAAA8H,GAAAhI,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAAgI,GAAA3H,MAAAH,KAAAI,YAAA,OAAAN,OAAA8D,EAAA,EAAA9D,CAAAgI,EAAApF,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAAgI,EAAA,EAAAvH,IAAA,SAAAC,MAAA,WASQ,IAPA,IAAMuH,EAAS,GACTC,EAAW,GACXC,EAAS,GACTC,EAAQ,GAEVC,EAAc,EAETnG,EAAI,EAAGA,EAAIhC,KAAK0D,MAAM0E,MAAM3G,OAAQO,IAAK,CAC9C+F,EAAO7F,KAAKF,EAAI,IAChB,IAAMxB,EACqB,MAAvBR,KAAK0D,MAAM0E,MAAMpG,GACXhC,KAAK0D,MAAM0E,MAAMpG,GAAKhC,KAAK0D,MAAM2E,WACjC,EACVF,GAAe3H,EACfyH,EAAO/F,KAAK1B,GACZ0H,EAAMhG,KAAKiG,GAGfH,EAAS9F,KAAK,CACVsD,MAAO,mBACP8C,KAAML,EACNM,QAAS,IACTC,gBAAiB,qBACjBC,YAAa,uBAEjBT,EAAS9F,KAAK,CACVsD,MAAO,oBACP8C,KAAMJ,EACNK,QAAS,IACTG,KAAM,OACNF,gBAAiB,qBACjBC,YAAa,uBAyBjB,OACIzE,EAAAC,EAAAC,cAAA,OAAKyE,MAAO,CAAEC,OAAQ,UAClB5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CACIvH,QA1BS,CACjBwH,qBAAqB,EACrBC,OAAQ,CACJC,MAAO,CACH,CACIC,GAAI,IACJP,KAAM,SACNQ,SAAU,OACVC,MAAO,CACHC,IAAK,IAGb,CACIH,GAAI,IACJP,KAAM,SACNQ,SAAU,QACVC,MAAO,CACHC,IAAK,OAUbd,KAAM,CACFP,OAAQA,EACRC,SAAUA,UAhElCF,EAAA,CAAoCrD,IAAMC,WCkB7B2E,EAAb,SAAA3G,GAII,SAAA2G,EAAY3F,GAAY,IAAAd,EAAA,OAAA9C,OAAA+C,EAAA,EAAA/C,CAAAE,KAAAqJ,IACpBzG,EAAA9C,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAAuJ,GAAAjG,KAAApD,KAAM0D,KAgDFoB,QAAU,WACdlC,EAAK0G,cAhDL1G,EAAKoC,MAAQ,CACTqD,WAAY,GACZkB,WAAY,CAAC,CAAEC,KAAM,SAAUlB,KAAM,MAJrB1F,EAJ5B,OAAA9C,OAAA8D,EAAA,EAAA9D,CAAAuJ,EAAA3G,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAAuJ,EAAA,EAAA9I,IAAA,oBAAAC,MAAA,WAaQR,KAAKsJ,eAbb,CAAA/I,IAAA,qBAAAC,MAAA,SAgB8BiJ,GAClBA,IAAazJ,KAAK0D,OAClB1D,KAAKsJ,eAlBjB,CAAA/I,IAAA,SAAAC,MAAA,WAuBQ,OACIwD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyF,SAAA,KACK1J,KAAKgF,MAAMuE,YAAcvJ,KAAK2J,eAC/B3F,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAe9E,QAAS9E,KAAK8E,QAASN,KAAK,gBA1B3D,CAAAjE,IAAA,eAAAC,MAAA,WAgCQ,IAAMqJ,EAA0B,GAEhC,IAAK,IAAMtJ,KAAOP,KAAKgF,MAAMuE,WACzB,GAAIvJ,KAAKgF,MAAMuE,WAAWhF,eAAehE,GAAM,CAC3C,IAAMuJ,EAAU9J,KAAKgF,MAAMuE,WAAWhJ,GAEtCsJ,EAAS3H,KACL8B,EAAAC,EAAAC,cAAA,OAAK3D,IAAKA,GACNyD,EAAAC,EAAAC,cAAA,YAAO4F,EAAQN,MACfxF,EAAAC,EAAAC,cAAC6F,EAAD,CACI3B,MAAO0B,EAAQxB,KACfD,WAAYrI,KAAK0D,MAAM2E,eAO3C,OAAOwB,IAlDf,CAAAtJ,IAAA,aAAAC,MAAA,WA2DQ,IADA,IAAM6H,EAAa,GACV5E,EAAQ,EAAGA,EAAQzD,KAAK0D,MAAM2E,WAAY5E,IAAS,CACxD,IAAMuG,EAAchK,KAAKiK,eACzB5B,EAAW5E,GAAS,CAChBuG,YAAaA,GAIrB,IAAME,EAAalK,KAAKmK,cAAc9B,GAChCkB,EAAavJ,KAAKoK,cAAc/B,EAAY6B,GAElDlK,KAAKiF,SAAS,CACVoD,WAAYA,EACZkB,WAAYA,MAvExB,CAAAhJ,IAAA,gBAAAC,MAAA,SA2E0B6H,GAElB,IADA,IAAM6B,EAAuB,GACpBG,EAAY,EAAGA,EAAYhC,EAAW5G,OAAQ4I,IAEnD,IADA,IAAMC,EAAejC,EAAWgC,GAAWL,YAClC/H,EAAO,EAAGA,EAAOqI,EAAa7I,OAAQQ,IAC3C,IAAK,IAAM1B,KAAO+J,EAAarI,GACvBqI,EAAarI,GAAMsC,eAAehE,KACD,IAA7B2J,EAAWK,QAAQhK,IACnB2J,EAAWhI,KAAK3B,GAOpC,OAAO2J,IA1Ff,CAAA3J,IAAA,gBAAAC,MAAA,SA8FQgK,EACAN,GAGA,IADA,IAAMX,EAAa,GACVkB,EAAY,EAAGA,EAAYP,EAAWzI,OAAQgJ,IAAa,CAChE,IAAMC,EAAgBR,EAAWO,GACjClB,EAAWrH,KAAK,CACZsH,KAAMkB,EACNpC,KAAMtI,KAAK2K,aAAaH,EAAUE,KAG1C,OAAOnB,IAzGf,CAAAhJ,IAAA,eAAAC,MAAA,SA6GQ6H,EACAoC,GAIA,IAFA,IAAIG,EAAsB,GAEjBnH,EAAQ,EAAGA,EAAQ4E,EAAW5G,OAAQgC,IAAS,CAIpD,IAHA,IAAMoH,EAAYxC,EAAW5E,GAAOuG,YAChCc,EAAiB,EAEZ7I,EAAO,EAAGA,EAAO4I,EAAUpJ,OAAQQ,IAAQ,CAChD,IAAM8I,EAASF,EAAU5I,GAAMwI,GACjB,MAAVM,IACAD,GAA4B,MAAVC,EAAiBA,EAAS,GAInB,MAA7BH,EAAUE,GACVF,EAAUE,GAAkB,EAE5BF,EAAUE,KAIlB,OAAOF,IApIf,CAAArK,IAAA,eAAAC,MAAA,WAuImC,IAAAqE,EAAA7E,KACrBgL,EAAe,GAIrB,OAHAhL,KAAK0D,MAAMoD,WAAWC,QAAQ,SAACC,EAAMvD,GACjCuH,EAAM9I,KAAK8E,EAAKiE,KAAKpG,EAAKnB,MAAMrC,eAE7B2J,MA5If3B,EAAA,CAAuC5E,IAAMC,oBCbhCwG,EAAb,SAAAxI,GACI,SAAAwI,EAAYxH,GAAY,IAAAd,EAAA,OAAA9C,OAAA+C,EAAA,EAAA/C,CAAAE,KAAAkL,IACpBtI,EAAA9C,OAAAoD,EAAA,EAAApD,CAAAE,KAAAF,OAAAqD,EAAA,EAAArD,CAAAoL,GAAA9H,KAAApD,KAAM0D,KA4BHyH,UAAY,SAAC7I,GAChBM,EAAKoC,MAAM8B,WAAW5E,KAAKI,GAC3BM,EAAKqC,SAAS,CAAE6B,WAAYlE,EAAKoC,MAAM8B,cA/BnBlE,EAkCjBwI,aAAe,SAAC3H,GACnBb,EAAKoC,MAAM8B,WAAWuE,OAAO5H,EAAO,GACpCb,EAAKqC,SAAS,CAAE6B,WAAYlE,EAAKoC,MAAM8B,cAlCvClE,EAAKoC,MAAQ,CACT8B,WAAY,GACZzF,WAAYiK,iBAAO,MAJH1I,EAD5B,OAAA9C,OAAA8D,EAAA,EAAA9D,CAAAoL,EAAAxI,GAAA5C,OAAA+D,EAAA,EAAA/D,CAAAoL,EAAA,EAAA3K,IAAA,SAAAC,MAAA,WAUQ,OACIwD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyF,SAAA,KACI1F,EAAAC,EAAAC,cAACqH,EAAD,CAAYxG,MAAO/E,KAAKmL,YACxBnH,EAAAC,EAAAC,cAACsH,EAAD,CACI1E,WAAY9G,KAAKgF,MAAM8B,WACvBI,SAAUlH,KAAKoL,eAEnBpH,EAAAC,EAAAC,cAACuH,EAAD,CACI3E,WAAY9G,KAAKgF,MAAM8B,WACvBzF,WAAYrB,KAAKgF,MAAM3D,aAE3B2C,EAAAC,EAAAC,cAACwH,EAAD,CACI5E,WAAY9G,KAAKgF,MAAM8B,WACvBzF,WAAYrB,KAAKgF,MAAM3D,WACvBgH,WAAY,WAxBhC6C,EAAA,CAA0BzG,IAAMC,WCCjBiH,EARO,WAClB,OACI3H,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACXrB,EAAAC,EAAAC,cAAC0H,EAAD,QCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECVNC,cACAC,IAASC,OAAOpI,EAAAC,EAAAC,cAACmI,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mEE3InB,IAAAC,EAAAC,EAAA,IAAAC,EAAAD,EAAA,IAAAE,EAAAF,EAAA,IAAAG,EAAAH,EAAA,KAAAI,EAAAJ,EAAA,KAAAK,EAAAL,EAAA,KAAAM,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KAAAQ,EAAAR,EAAA,KAAAS,EAAAT,EAAA,IAAAA,EAAAU,EAAAC,EAAA,gCAAAF,EAAA,IAAAT,EAAA,IAcA5K,IAAY+C,cAAcyI,aAAaC,KACvCzL,IAAY+C,cAAcyI,aAAaE,KACvC1L,IAAY+C,cAAcyI,aAAa/N,KACvCuC,IAAY+C,cAAcyI,aAAaG,KACvC3L,IAAY+C,cAAcyI,aAAajN,KACvCyB,IAAY+C,cAAcyI,aAAahN,KACvCwB,IAAY+C,cAAcyI,aAAa/M,KACvCuB,IAAY+C,cAAcyI,aAAa9M,KAEvCsB,IAAY+C,cAAcyI,aAAa7M,6GCpB1B8M,EAAb,SAAA7M,GAAA,SAAA6M,IAAA,OAAA9N,OAAAC,EAAA,EAAAD,CAAAE,KAAA4N,GAAA9N,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8N,GAAAzN,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA8N,EAAA7M,GAAAjB,OAAAQ,EAAA,EAAAR,CAAA8N,EAAA,EAAArN,IAAA,SAAAC,MAAA,WAEQ,MAAO,OAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,SANf,CAAAD,IAAA,WAAAC,MAAA,WAkBQ,MARoB,CAChB,CACIuN,OAAQ,GAEZ,CACIA,OAAQ,QAfxBH,EAAA,OAAwB1M,2GCDX2M,EAAb,SAAAhO,GAAA,SAAAgO,IAAA,OAAA/N,OAAAC,EAAA,EAAAD,CAAAE,KAAA6N,GAAA/N,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+N,GAAA1N,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAA+N,EAAAhO,GAAAC,OAAAQ,EAAA,EAAAR,CAAA+N,EAAA,EAAAtN,IAAA,SAAAC,MAAA,WAEQ,MAAO,OAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,oBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,MAVfqN,EAAA,OAAwBpN,2GCAXqN,EAAb,SAAAjO,GAAA,SAAAiO,IAAA,OAAAhO,OAAAC,EAAA,EAAAD,CAAAE,KAAA8N,GAAAhO,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgO,GAAA3N,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAgO,EAAAjO,GAAAC,OAAAQ,EAAA,EAAAR,CAAAgO,EAAA,EAAAvN,IAAA,SAAAC,MAAA,WAEQ,MAAO,OAFf,CAAAD,IAAA,UAAAC,MAAA,WAMQ,MAAO,mBANf,CAAAD,IAAA,eAAAC,MAAA,WAUQ,OAAO,MAVfsN,EAAA,OAAwBrN","file":"static/js/main.fb265a8c.chunk.js","sourcesContent":["import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D6 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D6\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Six Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 6;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D8 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D8\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Eight Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 8;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D10 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D10\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Ten Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 10;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D20 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D20\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Twenty Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 20;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D100 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D100\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Hundred Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 100;\r\n    }\r\n}\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\nimport * as SWRPG from \"./SWRPG-common\";\r\n\r\nexport class SWRPG_Purple extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Purple\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG_Purple\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                disadvantage: 1,\r\n            },\r\n            {\r\n                disadvantage: 1,\r\n            },\r\n            {\r\n                disadvantage: 1,\r\n            },\r\n            {},\r\n            {\r\n                fail: 1,\r\n            },\r\n            {\r\n                disadvantage: 1,\r\n                fail: 1,\r\n            },\r\n            {\r\n                disadvantage: 2,\r\n            },\r\n            {\r\n                fail: 2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { Dice, Face } from \"./IDice\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport abstract class DiceBase implements Dice {\r\n    public abstract getKey(): string;\r\n    public abstract getName(): string;\r\n    public abstract getSides(): Face[];\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n\r\nexport abstract class NumericDice extends DiceBase {\r\n    public abstract getFaceCount(): number;\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [];\r\n        const max = this.getFaceCount();\r\n        for (let i = 1; i <= max; i++) {\r\n            const face = {\r\n                value: i,\r\n            } as Face;\r\n            set.push(face);\r\n        }\r\n        return set;\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { DiceConstructor, DiceKinds } from \"./IDice\";\r\n\r\n\r\nexport class DiceFactory {\r\n    private static instance: DiceFactory;\r\n    private diceKinds: DiceKinds;\r\n\r\n    private constructor() {\r\n        this.diceKinds = {};\r\n    }\r\n\r\n    static getInstance(): DiceFactory {\r\n        if (!DiceFactory.instance) {\r\n            DiceFactory.instance = new DiceFactory();\r\n        }\r\n        return DiceFactory.instance;\r\n    }\r\n\r\n    public getDice(): DiceKinds {\r\n        return this.diceKinds;\r\n    }\r\n\r\n    public RegisterDice(constructor: DiceConstructor<any>) {\r\n        const dice = new constructor();\r\n        this.diceKinds[dice.getKey()] = dice;\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport { DiceFactory, DiceKinds, Dice } from \"../DiceModel/index\";\r\nimport {\r\n    ComboBox,\r\n    IComboBox,\r\n    IComboBoxOption,\r\n    Button,\r\n} from \"office-ui-fabric-react/lib/index\";\r\n\r\nexport interface DiceComboProps {\r\n    diceKinds: DiceKinds;\r\n    selected?: Dice | undefined;\r\n    onSelect: (dice: Dice) => void;\r\n}\r\n\r\nexport class DiceCombo extends React.Component<DiceComboProps> {\r\n    public render(): JSX.Element {\r\n        const diceOptions = this.renderDiceOptions();\r\n        return (\r\n            <ComboBox\r\n                options={diceOptions}\r\n                selectedKey={\r\n                    this.props.selected && this.props.selected.getKey()\r\n                }\r\n                onChange={this.onChange}\r\n            />\r\n        );\r\n    }\r\n    private renderDiceOptions(): IComboBoxOption[] {\r\n        const results = [];\r\n        for (const key in this.props.diceKinds) {\r\n            if (this.props.diceKinds.hasOwnProperty(key)) {\r\n                results.push({\r\n                    key: key,\r\n                    text: key,\r\n                });\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private onChange = (\r\n        event: React.FormEvent<IComboBox>,\r\n        option?: IComboBoxOption,\r\n        index?: number,\r\n        value?: string\r\n    ): void => {\r\n        this.props.onSelect(this.props.diceKinds[option!.key!]);\r\n    };\r\n}\r\n\r\nexport interface DicePickerProps {\r\n    onAdd(dice: Dice): void;\r\n}\r\ninterface DicePickerState {\r\n    dice: DiceKinds;\r\n    selected?: Dice;\r\n}\r\n\r\nexport class DicePicker extends React.Component<\r\n    DicePickerProps,\r\n    DicePickerState\r\n> {\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        const dice = DiceFactory.getInstance().getDice();\r\n        this.state = {\r\n            dice: dice,\r\n            selected: dice[Object.keys(dice)[0]],\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"flex-horizontal\">\r\n                <DiceCombo\r\n                    diceKinds={this.state.dice}\r\n                    selected={this.state.selected}\r\n                    onSelect={this.onSelect}\r\n                />\r\n                <Button\r\n                    label=\"AddButton\"\r\n                    text=\"Add\"\r\n                    onClick={this.onClick}\r\n                    disabled={this.state.selected == null}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClick = (): void => {\r\n        this.props.onAdd(this.state.selected!);\r\n    };\r\n    public onSelect = (dice: Dice): void => {\r\n        this.setState({ selected: dice as any });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { IconButton, getTheme } from \"office-ui-fabric-react/lib/index\";\r\n\r\ninterface DiceComponentProps {\r\n    dice: Dice;\r\n    index: number;\r\n    remove: (index: number) => void;\r\n}\r\n\r\nexport class DiceComponent extends React.Component<DiceComponentProps> {\r\n    public render(): JSX.Element {\r\n        const theme = getTheme();\r\n        return (\r\n            <div className=\"dice-component\">\r\n                {this.props.dice.getName()}\r\n                <IconButton\r\n                    text=\"Remove\"\r\n                    onClick={this.onClick}\r\n                    styles={{\r\n                        root: {\r\n                            color: theme.palette.blue,\r\n                            background: theme.palette.whiteTranslucent40,\r\n                        },\r\n                        rootHovered: {\r\n                            color: theme.palette.white,\r\n                            background: theme.palette.themeDarkAlt,\r\n                        },\r\n                    }}\r\n                    iconProps={{\r\n                        iconName: \"Delete\",\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    private onClick = (): void => {\r\n        this.props.remove(this.props.index);\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DiceComponent } from \"./DiceComponent\";\r\nimport \"./DicePool.css\";\r\n\r\ninterface DicePoolProps {\r\n    activeDice: Dice[];\r\n    onRemove: (index: number) => void;\r\n}\r\nexport class DicePool extends React.Component<DicePoolProps> {\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.props.activeDice.forEach((item, index) => {\r\n            content.push(\r\n                <DiceComponent\r\n                    dice={item}\r\n                    key={index}\r\n                    index={index}\r\n                    remove={this.props.onRemove}\r\n                />\r\n            );\r\n        });\r\n        return <div className=\"dice-pool flex-row\"> {content}</div>;\r\n    }\r\n}\r\n","export const disadvantage = \"disadvantage\";\r\nexport const fail = \"fail\";\r\nexport const number = \"number\";\r\n\r\nconst glyphs: { [key: string]: string } = {};\r\nglyphs[disadvantage] = \"D\";\r\nglyphs[number] = \"\";\r\nglyphs[fail] = \"F\";\r\n\r\nexport function mapGlyph(identifier: string, count: number): string {\r\n    const glyph = glyphs[identifier];\r\n    return glyph != null ? glyph.repeat(count) : count.toString();\r\n}\r\n","import React from \"react\";\r\nimport { Face } from \"../DiceModel/IDice\";\r\nimport { mapGlyph } from \"../DiceModel/SWRPG-common\";\r\nimport \"./DiceResult.css\";\r\n\r\ninterface DiceResultProps {\r\n    content: Face;\r\n}\r\nexport class DiceResult extends React.Component<DiceResultProps> {\r\n    public render(): JSX.Element {\r\n        const results = [];\r\n        for (const key in this.props.content) {\r\n            if (this.props.content.hasOwnProperty(key)) {\r\n                const count = this.props.content[key];\r\n                results.push(\r\n                    <span key={key} className=\"value\">\r\n                        {mapGlyph(key, count)}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n        return <div className=\"dice-result\">{results}</div>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { DiceResult } from \"./DiceResult\";\r\nimport \"./DiceRoll.css\";\r\n\r\ninterface DiceRollProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class DiceRoll extends React.Component<DiceRollProps> {\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.props.activeDice.forEach((dice, index) => {\r\n            content.push(\r\n                <DiceResult content={this.rollDice(dice)} key={index} />\r\n            );\r\n        });\r\n        return <div className=\"dice-roll flex-row\">{content}</div>;\r\n    }\r\n\r\n    private rollDice(dice: Dice): Face {\r\n        const options = dice.getSides();\r\n        const selection = this.props.randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { Bar } from \"react-chartjs-2\";\r\nimport React from \"react\";\r\n\r\nexport interface HistogramChartProps {\r\n    items: number[];\r\n    iterations: number;\r\n}\r\nexport class HistogramChart extends React.Component<HistogramChartProps> {\r\n    public render(): JSX.Element {\r\n        const labels = [];\r\n        const datasets = [];\r\n        const values = [];\r\n        const accum = [];\r\n\r\n        let accumulator = 0;\r\n\r\n        for (let i = 0; i < this.props.items.length; i++) {\r\n            labels.push(i + \"\");\r\n            const value =\r\n                this.props.items[i] != null\r\n                    ? this.props.items[i] / this.props.iterations\r\n                    : 0;\r\n            accumulator += value;\r\n            values.push(value);\r\n            accum.push(accumulator);\r\n        }\r\n\r\n        datasets.push({\r\n            label: \"My First dataset\",\r\n            data: values,\r\n            yAxisID: \"A\",\r\n            backgroundColor: \"rgb(200, 200, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        datasets.push({\r\n            label: \"My Second dataset\",\r\n            data: accum,\r\n            yAxisID: \"B\",\r\n            type: \"line\",\r\n            backgroundColor: \"rgb(255, 255, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        const chartOptions = {\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        id: \"A\",\r\n                        type: \"linear\",\r\n                        position: \"left\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                    {\r\n                        id: \"B\",\r\n                        type: \"linear\",\r\n                        position: \"right\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        } as any;\r\n        return (\r\n            <div style={{ height: \"500px\" }}>\r\n                <Bar\r\n                    options={chartOptions}\r\n                    data={{\r\n                        labels: labels,\r\n                        datasets: datasets,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport { HistogramChart } from \"./HistogramChart\";\r\n\r\ninterface ProbabilitiesViewProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n    iterations: number;\r\n}\r\nexport interface Histogram {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\ninterface RollOutcome {\r\n    rollOutCome: Face[];\r\n}\r\n\r\ninterface ProbabilitiesViewState {\r\n    iterations: RollOutcome[];\r\n    histograms: Histogram[];\r\n}\r\n\r\nexport class ProbabilitiesView extends React.Component<\r\n    ProbabilitiesViewProps,\r\n    ProbabilitiesViewState\r\n> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            iterations: [],\r\n            histograms: [{ name: \"number\", data: [] }],\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.regenerate();\r\n    }\r\n\r\n    public componentDidUpdate(newProps: ProbabilitiesViewProps) {\r\n        if (newProps !== this.props) {\r\n            this.regenerate();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                {this.state.histograms && this.renderCharts()}\r\n                <PrimaryButton onClick={this.onClick} text=\"Generate\" />\r\n            </>\r\n        );\r\n    }\r\n\r\n    private renderCharts(): JSX.Element[] {\r\n        const elements: JSX.Element[] = [];\r\n\r\n        for (const key in this.state.histograms) {\r\n            if (this.state.histograms.hasOwnProperty(key)) {\r\n                const element = this.state.histograms[key];\r\n\r\n                elements.push(\r\n                    <div key={key}>\r\n                        <span>{element.name}</span>\r\n                        <HistogramChart\r\n                            items={element.data}\r\n                            iterations={this.props.iterations}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    private onClick = (): void => {\r\n        this.regenerate();\r\n    };\r\n\r\n    private regenerate() {\r\n        const iterations = [];\r\n        for (let index = 0; index < this.props.iterations; index++) {\r\n            const rollOutCome = this.generateRoll();\r\n            iterations[index] = {\r\n                rollOutCome: rollOutCome,\r\n            };\r\n        }\r\n\r\n        const dimensions = this.getDimensions(iterations);\r\n        const histograms = this.getHistograms(iterations, dimensions);\r\n\r\n        this.setState({\r\n            iterations: iterations,\r\n            histograms: histograms,\r\n        });\r\n    }\r\n\r\n    private getDimensions(iterations: RollOutcome[]): string[] {\r\n        const dimensions: string[] = [];\r\n        for (let iteration = 0; iteration < iterations.length; iteration++) {\r\n            const outcomeFaces = iterations[iteration].rollOutCome;\r\n            for (let face = 0; face < outcomeFaces.length; face++) {\r\n                for (const key in outcomeFaces[face]) {\r\n                    if (outcomeFaces[face].hasOwnProperty(key)) {\r\n                        if (dimensions.indexOf(key) === -1) {\r\n                            dimensions.push(key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getHistograms(\r\n        outcomes: RollOutcome[],\r\n        dimensions: string[]\r\n    ): Histogram[] {\r\n        const histograms = [];\r\n        for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n            const dimensionName = dimensions[dimension];\r\n            histograms.push({\r\n                name: dimensionName,\r\n                data: this.getHistogram(outcomes, dimensionName),\r\n            });\r\n        }\r\n        return histograms;\r\n    }\r\n\r\n    private getHistogram(\r\n        iterations: RollOutcome[],\r\n        dimension: string\r\n    ): number[] {\r\n        let histogram: number[] = [];\r\n\r\n        for (let index = 0; index < iterations.length; index++) {\r\n            const diceRolls = iterations[index].rollOutCome;\r\n            let iterationTotal = 0;\r\n\r\n            for (let face = 0; face < diceRolls.length; face++) {\r\n                const result = diceRolls[face][dimension];\r\n                if (result != null) {\r\n                    iterationTotal += result != null ? result : 0;\r\n                }\r\n            }\r\n\r\n            if (histogram[iterationTotal] == null) {\r\n                histogram[iterationTotal] = 1;\r\n            } else {\r\n                histogram[iterationTotal]++;\r\n            }\r\n        }\r\n\r\n        return histogram;\r\n    }\r\n\r\n    private generateRoll(): Face[] {\r\n        const rolls: any[] = [];\r\n        this.props.activeDice.forEach((item, index) => {\r\n            rolls.push(item.roll(this.props.randomSeed));\r\n        });\r\n        return rolls;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DicePicker } from \"./DicePicker\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DicePool } from \"./DicePool\";\r\nimport { DiceRoll } from \"./DiceRoll\";\r\nimport { ProbabilitiesView } from \"./ProbabilitiesView\";\r\nimport { RandomSeed, create } from \"random-seed\";\r\n\r\ninterface ViewState {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class View extends React.Component<any, ViewState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            activeDice: [],\r\n            randomSeed: create(\"0\"),\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <DicePicker onAdd={this.onAddDice} />\r\n                <DicePool\r\n                    activeDice={this.state.activeDice}\r\n                    onRemove={this.onRemoveDice}\r\n                />\r\n                <DiceRoll\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                />\r\n                <ProbabilitiesView\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    iterations={50000}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    public onAddDice = (dice: Dice): void => {\r\n        this.state.activeDice.push(dice);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n\r\n    public onRemoveDice = (index: number): void => {\r\n        this.state.activeDice.splice(index, 1);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./common.css\";\r\nimport { View } from \"./UI/View\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <View />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\n\r\ninitializeIcons(/* optional base url */);\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { D2 } from \"./D2\";\r\nimport { D3 } from \"./D3\";\r\nimport { D4 } from \"./D4\";\r\nimport { D6 } from \"./D6\";\r\nimport { D8 } from \"./D8\";\r\nimport { D10 } from \"./D10\";\r\nimport { D20 } from \"./D20\";\r\nimport { D100 } from \"./D100\";\r\nimport { SWRPG_Purple } from \"./SWRPG\";\r\nimport { DiceFactory } from \"./DiceFactory\";\r\n\r\nexport { DiceFactory };\r\nexport * from \"./IDice\";\r\n\r\nDiceFactory.getInstance().RegisterDice(D2);\r\nDiceFactory.getInstance().RegisterDice(D3);\r\nDiceFactory.getInstance().RegisterDice(D6);\r\nDiceFactory.getInstance().RegisterDice(D4);\r\nDiceFactory.getInstance().RegisterDice(D8);\r\nDiceFactory.getInstance().RegisterDice(D10);\r\nDiceFactory.getInstance().RegisterDice(D20);\r\nDiceFactory.getInstance().RegisterDice(D100);\r\n\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Purple);\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class D2 extends DiceBase {\r\n    getKey(): string {\r\n        return \"D2\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Coin\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                number: 0,\r\n            },\r\n            {\r\n                number: 1,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D3 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D3\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Three Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 3;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D4 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D4\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Four Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 4;\r\n    }\r\n}\r\n"],"sourceRoot":""}