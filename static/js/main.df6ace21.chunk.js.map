{"version":3,"sources":["DiceModel/D4.ts","DiceModel/D6.ts","DiceModel/D8.ts","DiceModel/D10.ts","DiceModel/D20.ts","DiceModel/D100.ts","DiceModel/DiceBase.ts","DiceModel/DiceFactory.ts","UI/DicePicker.tsx","UI/DiceComponent.tsx","UI/DicePool.tsx","DiceModel/SWRPG-common.ts","UI/DiceResult.tsx","UI/DiceRoll.tsx","UI/HistogramChart.tsx","UI/ProbabilitiesView.tsx","UI/View.tsx","App.tsx","serviceWorker.ts","index.tsx","DiceModel/SWRPG.ts","DiceModel/index.ts","DiceModel/D2.ts","DiceModel/D3.ts"],"names":["D4","_NumericDice","Object","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","NumericDice","D6","D8","D10","D20","D100","DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","randomSeed","options","getSides","range","length","_DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__","set","max","getFaceCount","i","face","push","DiceFactory","diceKinds","constructor","dice","getKey","instance","DiceCombo","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","concat","onChange","event","option","index","props","onSelect","inherits","createClass","diceOptions","renderDiceOptions","react_default","a","createElement","ComboBox","selectedKey","selected","results","hasOwnProperty","text","getName","React","Component","DicePicker","_React$Component2","_this2","onClick","onAdd","state","setState","getInstance","getDice","keys","className","DicePicker_DiceCombo","Button","label","disabled","DiceComponent","remove","theme","getTheme","IconButton","styles","root","color","palette","blue","background","whiteTranslucent40","rootHovered","white","themeDarkAlt","iconProps","iconName","DicePool","content","activeDice","forEach","item","DiceComponent_DiceComponent","onRemove","glyphs","mapGlyph","identifier","count","glyph","repeat","Math","abs","toString","DiceResult","style","backgroundColor","getBackgroundColor","getForegroundColor","getGlyphs","DiceRoll","rollFaces","faces","newProps","DiceResult_DiceResult","Fragment","PrimaryButton","_this3","rollDice","HistogramChart","labels","datasets","values","accum","accumulator","items","sort","b","parseInt","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","j","iterations","err","return","data","yAxisID","borderColor","type","height","es","maintainAspectRatio","scales","yAxes","id","position","ticks","min","ProbabilitiesView","histograms","name","regenerate","renderCharts","elements","element","HistogramChart_HistogramChart","rollOutCome","generateRoll","dimensions","getDimensions","getHistograms","iteration","outcomeFaces","indexOf","outcomes","dimension","dimensionName","getHistogram","histogram","diceRolls","iterationTotal","result","rolls","roll","View","onAddDice","onRemoveDice","splice","create","DicePicker_DicePicker","DicePool_DicePool","DiceRoll_DiceRoll","ProbabilitiesView_ProbabilitiesView","App","View_View","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","SWRPG_Difficulty","advantage","success","SWRPG_Ability","_DiceBase2","SWRPG_Proficiency","_DiceBase3","triumph","SWRPG_Challenge","_DiceBase4","despair","SWRPG_Force","_DiceBase5","force","SWRPG_Setback","_DiceBase6","SWRPG_Boost","_DiceBase7","_D2__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_D3__WEBPACK_IMPORTED_MODULE_1__","_D4__WEBPACK_IMPORTED_MODULE_2__","_D6__WEBPACK_IMPORTED_MODULE_3__","_D8__WEBPACK_IMPORTED_MODULE_4__","_D10__WEBPACK_IMPORTED_MODULE_5__","_D20__WEBPACK_IMPORTED_MODULE_6__","_D100__WEBPACK_IMPORTED_MODULE_7__","_SWRPG__WEBPACK_IMPORTED_MODULE_8__","_DiceFactory__WEBPACK_IMPORTED_MODULE_9__","d","__webpack_exports__","RegisterDice","D2","D3"],"mappings":"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","file":"static/js/main.df6ace21.chunk.js","sourcesContent":["import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D4 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D4\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Four Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 4;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D6 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D6\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Six Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 6;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D8 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D8\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Eight Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 8;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D10 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D10\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Ten Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 10;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D20 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D20\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Twenty Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 20;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D100 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D100\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Hundred Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 100;\r\n    }\r\n}\r\n","import { Dice, Face } from \"./IDice\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport abstract class DiceBase implements Dice {\r\n    public abstract getKey(): string;\r\n    public abstract getName(): string;\r\n    public abstract getSides(): Face[];\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n\r\nexport abstract class NumericDice extends DiceBase {\r\n    public abstract getFaceCount(): number;\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [];\r\n        const max = this.getFaceCount();\r\n        for (let i = 1; i <= max; i++) {\r\n            const face = {\r\n                value: i,\r\n            } as Face;\r\n            set.push(face);\r\n        }\r\n        return set;\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { DiceConstructor, DiceKinds } from \"./IDice\";\r\n\r\n\r\nexport class DiceFactory {\r\n    private static instance: DiceFactory;\r\n    private diceKinds: DiceKinds;\r\n\r\n    private constructor() {\r\n        this.diceKinds = {};\r\n    }\r\n\r\n    static getInstance(): DiceFactory {\r\n        if (!DiceFactory.instance) {\r\n            DiceFactory.instance = new DiceFactory();\r\n        }\r\n        return DiceFactory.instance;\r\n    }\r\n\r\n    public getDice(): DiceKinds {\r\n        return this.diceKinds;\r\n    }\r\n\r\n    public RegisterDice(constructor: DiceConstructor<any>) {\r\n        const dice = new constructor();\r\n        this.diceKinds[dice.getKey()] = dice;\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport { DiceFactory, DiceKinds, Dice } from \"../DiceModel/index\";\r\nimport {\r\n    ComboBox,\r\n    IComboBox,\r\n    IComboBoxOption,\r\n    Button,\r\n} from \"office-ui-fabric-react/lib/index\";\r\n\r\nexport interface DiceComboProps {\r\n    diceKinds: DiceKinds;\r\n    selected?: Dice | undefined;\r\n    onSelect: (dice: Dice) => void;\r\n}\r\n\r\nexport class DiceCombo extends React.Component<DiceComboProps> {\r\n    public render(): JSX.Element {\r\n        const diceOptions = this.renderDiceOptions();\r\n        return (\r\n            <ComboBox\r\n                options={diceOptions}\r\n                selectedKey={\r\n                    this.props.selected && this.props.selected.getKey()\r\n                }\r\n                onChange={this.onChange}\r\n            />\r\n        );\r\n    }\r\n    private renderDiceOptions(): IComboBoxOption[] {\r\n        const results = [];\r\n        for (const key in this.props.diceKinds) {\r\n            if (this.props.diceKinds.hasOwnProperty(key)) {\r\n                results.push({\r\n                    key: key,\r\n                    text: this.props.diceKinds[key].getName(),\r\n                });\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private onChange = (\r\n        event: React.FormEvent<IComboBox>,\r\n        option?: IComboBoxOption,\r\n        index?: number,\r\n        value?: string\r\n    ): void => {\r\n        this.props.onSelect(this.props.diceKinds[option!.key!]);\r\n    };\r\n}\r\n\r\nexport interface DicePickerProps {\r\n    onAdd(dice: Dice): void;\r\n}\r\ninterface DicePickerState {\r\n    dice: DiceKinds;\r\n    selected?: Dice;\r\n}\r\n\r\nexport class DicePicker extends React.Component<\r\n    DicePickerProps,\r\n    DicePickerState\r\n> {\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        const dice = DiceFactory.getInstance().getDice();\r\n        this.state = {\r\n            dice: dice,\r\n            selected: dice[Object.keys(dice)[0]],\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"flex-horizontal\">\r\n                <DiceCombo\r\n                    diceKinds={this.state.dice}\r\n                    selected={this.state.selected}\r\n                    onSelect={this.onSelect}\r\n                />\r\n                <Button\r\n                    label=\"AddButton\"\r\n                    text=\"Add\"\r\n                    onClick={this.onClick}\r\n                    disabled={this.state.selected == null}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClick = (): void => {\r\n        this.props.onAdd(this.state.selected!);\r\n    };\r\n    public onSelect = (dice: Dice): void => {\r\n        this.setState({ selected: dice as any });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { IconButton, getTheme } from \"office-ui-fabric-react/lib/index\";\r\n\r\ninterface DiceComponentProps {\r\n    dice: Dice;\r\n    index: number;\r\n    remove: (index: number) => void;\r\n}\r\n\r\nexport class DiceComponent extends React.Component<DiceComponentProps> {\r\n    public render(): JSX.Element {\r\n        const theme = getTheme();\r\n        return (\r\n            <div className=\"dice-component\">\r\n                {this.props.dice.getName()}\r\n                <IconButton\r\n                    text=\"Remove\"\r\n                    onClick={this.onClick}\r\n                    styles={{\r\n                        root: {\r\n                            color: theme.palette.blue,\r\n                            background: theme.palette.whiteTranslucent40,\r\n                        },\r\n                        rootHovered: {\r\n                            color: theme.palette.white,\r\n                            background: theme.palette.themeDarkAlt,\r\n                        },\r\n                    }}\r\n                    iconProps={{\r\n                        iconName: \"Delete\",\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    private onClick = (): void => {\r\n        this.props.remove(this.props.index);\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DiceComponent } from \"./DiceComponent\";\r\nimport \"./DicePool.css\";\r\n\r\ninterface DicePoolProps {\r\n    activeDice: Dice[];\r\n    onRemove: (index: number) => void;\r\n}\r\nexport class DicePool extends React.Component<DicePoolProps> {\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.props.activeDice.forEach((item, index) => {\r\n            content.push(\r\n                <DiceComponent\r\n                    dice={item}\r\n                    key={index}\r\n                    index={index}\r\n                    remove={this.props.onRemove}\r\n                />\r\n            );\r\n        });\r\n        return <div className=\"dice-pool flex-row\"> {content}</div>;\r\n    }\r\n}\r\n","export const advantage = \"advantage\";\r\nexport const success = \"success\";\r\nexport const number = \"number\";\r\n\r\nconst glyphs: { [key: string]: string } = {};\r\nglyphs[advantage] = \"A\";\r\nglyphs[number] = \"\";\r\nglyphs[success] = \"S\";\r\n\r\nexport function mapGlyph(identifier: string, count: number): string {\r\n    const glyph = glyphs[identifier];\r\n    return glyph != null ? glyph.repeat(Math.abs(count)) : count.toString();\r\n}\r\n","import React from \"react\";\r\nimport { Face, Dice } from \"../DiceModel/IDice\";\r\nimport { mapGlyph } from \"../DiceModel/SWRPG-common\";\r\nimport \"./DiceResult.css\";\r\n\r\ninterface DiceResultProps {\r\n    dice: Dice;\r\n    face: Face;\r\n}\r\n/** Renders a set of glyphs associated with a given face on a  dice */\r\nexport class DiceResult extends React.Component<DiceResultProps> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div\r\n                className=\"dice-result\"\r\n                style={{\r\n                    backgroundColor: this.props.dice.getBackgroundColor(),\r\n                    color: this.props.dice.getForegroundColor(),\r\n                }}\r\n            >\r\n                {this.getGlyphs()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getGlyphs(): JSX.Element[] {\r\n        const results: JSX.Element[] = [];\r\n        for (const key in this.props.face) {\r\n            if (this.props.face.hasOwnProperty(key)) {\r\n                const count = this.props.face[key];\r\n                results.push(\r\n                    <span key={key} className=\"value\">\r\n                        {mapGlyph(key, count)}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { DiceResult } from \"./DiceResult\";\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport \"./DiceRoll.css\";\r\n\r\ninterface DiceRollProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\n\r\nexport interface DiceRollState {\r\n    faces: Face[];\r\n}\r\n\r\nexport class DiceRoll extends React.Component<DiceRollProps, DiceRollState> {\r\n    public constructor(props: DiceRollProps) {\r\n        super(props);\r\n        this.state = { faces: [] };\r\n    }\r\n\r\n    public componentWillReceiveProps(newProps: DiceRollProps) {\r\n        if (newProps !== this.props) {\r\n            this.rollFaces(newProps);\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.state.faces.forEach((face, index) => {\r\n            content.push(\r\n                <DiceResult\r\n                    face={this.state.faces[index]}\r\n                    dice={this.props.activeDice[index]}\r\n                    key={index}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <>\r\n                <div className=\"dice-roll flex-row\">{content}</div>\r\n\r\n                {this.props.activeDice.length > 0 && (\r\n                    <PrimaryButton onClick={this.onClick} text=\"Generate\" />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private onClick = (): void => {\r\n        this.rollFaces(this.props);\r\n    };\r\n\r\n    private rollFaces(props: DiceRollProps): void {\r\n        const faces: Face[] = [];\r\n        props.activeDice.forEach((dice, index) => {\r\n            faces.push(this.rollDice(dice));\r\n        });\r\n        this.setState({ faces: faces });\r\n    }\r\n\r\n    private rollDice(dice: Dice): Face {\r\n        const options = dice.getSides();\r\n        const selection = this.props.randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { Bar } from \"react-chartjs-2\";\r\nimport React from \"react\";\r\n\r\nexport interface HistogramChartProps {\r\n    items: number[];\r\n    iterations: number;\r\n}\r\nexport class HistogramChart extends React.Component<HistogramChartProps> {\r\n    public render(): JSX.Element {\r\n        const labels = [];\r\n        const datasets = [];\r\n        const values: number[] = [];\r\n        const accum: number[] = [];\r\n\r\n        let accumulator = 0;\r\n\r\n        const keys = Object.keys(this.props.items).sort((a, b) => {\r\n            return parseInt(a) - parseInt(b);\r\n        });\r\n        for (const i of keys) {\r\n            labels.push(i + \"\");\r\n            const j = parseInt(i);\r\n            const value =\r\n                this.props.items[j] != null\r\n                    ? this.props.items[j] / this.props.iterations\r\n                    : 0;\r\n            accumulator += value;\r\n            values.push(value);\r\n            accum.push(accumulator);\r\n        }\r\n\r\n        datasets.push({\r\n            label: \"Probability\",\r\n            data: values,\r\n            yAxisID: \"A\",\r\n            backgroundColor: \"rgb(200, 200, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        datasets.push({\r\n            label: \"CDF\",\r\n            data: accum,\r\n            yAxisID: \"B\",\r\n            type: \"line\",\r\n            backgroundColor: \"rgb(255, 255, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        const chartOptions = {\r\n            maintainAspectRatio: false,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        id: \"A\",\r\n                        type: \"linear\",\r\n                        position: \"left\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                    {\r\n                        id: \"B\",\r\n                        type: \"linear\",\r\n                        position: \"right\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        } as any;\r\n        return (\r\n            <div style={{ height: \"250px\" }}>\r\n                <Bar\r\n                    options={chartOptions}\r\n                    data={{\r\n                        labels: labels,\r\n                        datasets: datasets,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { HistogramChart } from \"./HistogramChart\";\r\n\r\ninterface ProbabilitiesViewProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n    iterations: number;\r\n}\r\nexport interface Histogram {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\ninterface RollOutcome {\r\n    rollOutCome: Face[];\r\n}\r\n\r\ninterface ProbabilitiesViewState {\r\n    iterations: RollOutcome[];\r\n    histograms: Histogram[];\r\n}\r\n\r\nexport class ProbabilitiesView extends React.Component<\r\n    ProbabilitiesViewProps,\r\n    ProbabilitiesViewState\r\n> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            iterations: [],\r\n            histograms: [{ name: \"number\", data: [] }],\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.regenerate();\r\n    }\r\n\r\n    public componentDidUpdate(newProps: ProbabilitiesViewProps) {\r\n        if (newProps !== this.props) {\r\n            this.regenerate();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return <>{this.state.histograms && this.renderCharts()}</>;\r\n    }\r\n\r\n    private renderCharts(): JSX.Element[] {\r\n        const elements: JSX.Element[] = [];\r\n\r\n        for (const key in this.state.histograms) {\r\n            if (this.state.histograms.hasOwnProperty(key)) {\r\n                const element = this.state.histograms[key];\r\n\r\n                elements.push(\r\n                    <div key={key}>\r\n                        <span>{element.name}</span>\r\n                        <HistogramChart\r\n                            items={element.data}\r\n                            iterations={this.props.iterations}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    private regenerate() {\r\n        const iterations = [];\r\n        for (let index = 0; index < this.props.iterations; index++) {\r\n            const rollOutCome = this.generateRoll();\r\n            iterations[index] = {\r\n                rollOutCome: rollOutCome,\r\n            };\r\n        }\r\n\r\n        const dimensions = this.getDimensions(iterations);\r\n        const histograms = this.getHistograms(iterations, dimensions);\r\n\r\n        this.setState({\r\n            iterations: iterations,\r\n            histograms: histograms,\r\n        });\r\n    }\r\n\r\n    private getDimensions(iterations: RollOutcome[]): string[] {\r\n        const dimensions: string[] = [];\r\n        for (let iteration = 0; iteration < iterations.length; iteration++) {\r\n            const outcomeFaces = iterations[iteration].rollOutCome;\r\n            for (let face = 0; face < outcomeFaces.length; face++) {\r\n                for (const key in outcomeFaces[face]) {\r\n                    if (outcomeFaces[face].hasOwnProperty(key)) {\r\n                        if (dimensions.indexOf(key) === -1) {\r\n                            dimensions.push(key);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return dimensions;\r\n    }\r\n\r\n    private getHistograms(\r\n        outcomes: RollOutcome[],\r\n        dimensions: string[]\r\n    ): Histogram[] {\r\n        const histograms = [];\r\n        for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n            const dimensionName = dimensions[dimension];\r\n            histograms.push({\r\n                name: dimensionName,\r\n                data: this.getHistogram(outcomes, dimensionName),\r\n            });\r\n        }\r\n        return histograms;\r\n    }\r\n\r\n    private getHistogram(\r\n        iterations: RollOutcome[],\r\n        dimension: string\r\n    ): number[] {\r\n        let histogram: number[] = [];\r\n\r\n        for (let index = 0; index < iterations.length; index++) {\r\n            const diceRolls = iterations[index].rollOutCome;\r\n            let iterationTotal = 0;\r\n\r\n            for (let face = 0; face < diceRolls.length; face++) {\r\n                const result = diceRolls[face][dimension];\r\n                if (result != null) {\r\n                    iterationTotal += result != null ? result : 0;\r\n                }\r\n            }\r\n\r\n            if (histogram[iterationTotal] == null) {\r\n                histogram[iterationTotal] = 1;\r\n            } else {\r\n                histogram[iterationTotal]++;\r\n            }\r\n        }\r\n        return histogram;\r\n    }\r\n\r\n    private generateRoll(): Face[] {\r\n        const rolls: any[] = [];\r\n        this.props.activeDice.forEach((item, index) => {\r\n            rolls.push(item.roll(this.props.randomSeed));\r\n        });\r\n        return rolls;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DicePicker } from \"./DicePicker\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DicePool } from \"./DicePool\";\r\nimport { DiceRoll } from \"./DiceRoll\";\r\nimport { ProbabilitiesView } from \"./ProbabilitiesView\";\r\nimport { RandomSeed, create } from \"random-seed\";\r\n\r\ninterface ViewState {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class View extends React.Component<any, ViewState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            activeDice: [],\r\n            randomSeed: create(\"0\"),\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <DicePicker onAdd={this.onAddDice} />\r\n                <DicePool\r\n                    activeDice={this.state.activeDice}\r\n                    onRemove={this.onRemoveDice}\r\n                />\r\n                <DiceRoll\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                />\r\n                <ProbabilitiesView\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    iterations={50000}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    public onAddDice = (dice: Dice): void => {\r\n        this.state.activeDice.push(dice);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n\r\n    public onRemoveDice = (index: number): void => {\r\n        this.state.activeDice.splice(index, 1);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./common.css\";\r\nimport { View } from \"./UI/View\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <View />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\n\r\ninitializeIcons(/* optional base url */);\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class SWRPG_Difficulty extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Difficulty\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG_Difficulty\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"purple\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {},\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Ability extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Ability\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Ability\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"green\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Proficiency extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Proficiency\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Proficiency\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"yellow\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                triumph: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Challenge extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Challenge\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Challenge\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"red\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {\r\n                despair: 1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Force extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Force\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Force\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 1,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Setback extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Setback\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG_Setback\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Boost extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Boost\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG_Boost\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"blue\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { D2 } from \"./D2\";\r\nimport { D3 } from \"./D3\";\r\nimport { D4 } from \"./D4\";\r\nimport { D6 } from \"./D6\";\r\nimport { D8 } from \"./D8\";\r\nimport { D10 } from \"./D10\";\r\nimport { D20 } from \"./D20\";\r\nimport { D100 } from \"./D100\";\r\nimport {\r\n    SWRPG_Difficulty,\r\n    SWRPG_Ability,\r\n    SWRPG_Boost,\r\n    SWRPG_Challenge,\r\n    SWRPG_Force,\r\n    SWRPG_Proficiency,\r\n    SWRPG_Setback,\r\n} from \"./SWRPG\";\r\nimport { DiceFactory } from \"./DiceFactory\";\r\n\r\nexport { DiceFactory };\r\nexport * from \"./IDice\";\r\n\r\nDiceFactory.getInstance().RegisterDice(D2);\r\nDiceFactory.getInstance().RegisterDice(D3);\r\nDiceFactory.getInstance().RegisterDice(D6);\r\nDiceFactory.getInstance().RegisterDice(D4);\r\nDiceFactory.getInstance().RegisterDice(D8);\r\nDiceFactory.getInstance().RegisterDice(D10);\r\nDiceFactory.getInstance().RegisterDice(D20);\r\nDiceFactory.getInstance().RegisterDice(D100);\r\n\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Difficulty);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Ability);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Boost);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Challenge);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Force);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Proficiency);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Setback);\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class D2 extends DiceBase {\r\n    getKey(): string {\r\n        return \"D2\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Coin\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                value: 0,\r\n            },\r\n            {\r\n                value: 1,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D3 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D3\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Three Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 3;\r\n    }\r\n}\r\n"],"sourceRoot":""}