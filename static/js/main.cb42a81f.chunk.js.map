{"version":3,"sources":["DiceModel/DiceFactory.ts","DiceModel/index.ts","DiceModel/D6.ts","UI/DicePicker.tsx","UI/DiceComponent.tsx","UI/DicePool.tsx","UI/DiceRoll.tsx","UI/HistogramTable.tsx","UI/ProbabilitiesView.tsx","UI/View.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DiceFactory","Object","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","diceKinds","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","constructor","dice","getKey","instance","_D6__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_DiceFactory__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","getInstance","RegisterDice","D6","randomSeed","options","getSides","range","length","DiceCombo","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","diceOptions","renderDiceOptions","react_default","a","createElement","ComboBox","selectedKey","props","selected","results","hasOwnProperty","push","text","React","Component","DicePicker","_React$Component2","_this","call","onClick","onAdd","state","getDice","keys","className","DicePicker_DiceCombo","Button","label","disabled","DiceComponent","_getPrototypeOf2","_len","args","Array","_key","concat","remove","index","theme","getTheme","getName","IconButton","styles","root","color","palette","blue","background","whiteTranslucent40","rootHovered","white","themeDarkAlt","iconProps","iconName","DicePool","content","activeDice","forEach","item","DiceComponent_DiceComponent","onRemove","Fragment","DiceRoll","rollDice","HistogramTable","items","i","name","DetailsList","layoutMode","DetailsListLayoutMode","fixedColumns","columns","fieldName","minWidth","maxWidth","isResizable","ProbabilitiesView","regenerate","iterations","histogram","newProps","HistogramTable_HistogramTable","PrimaryButton","rollOutCome","generateRoll","summary","summarize","setState","bucketize","symbol","outcome","total","_this2","rolls","roll","View","onAddDice","onRemoveDice","splice","create","DicePicker_DicePicker","DicePool_DicePool","DiceRoll_DiceRoll","ProbabilitiesView_ProbabilitiesView","App","View_View","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb42a81f.chunk.js","sourcesContent":["import { DiceConstructor, DiceKinds } from \"./IDice\";\r\n\r\n\r\nexport class DiceFactory {\r\n    private static instance: DiceFactory;\r\n    private diceKinds: DiceKinds;\r\n\r\n    private constructor() {\r\n        this.diceKinds = {};\r\n    }\r\n\r\n    static getInstance(): DiceFactory {\r\n        if (!DiceFactory.instance) {\r\n            DiceFactory.instance = new DiceFactory();\r\n        }\r\n        return DiceFactory.instance;\r\n    }\r\n\r\n    public getDice(): DiceKinds {\r\n        return this.diceKinds;\r\n    }\r\n\r\n    public RegisterDice(constructor: DiceConstructor<any>) {\r\n        const dice = new constructor();\r\n        this.diceKinds[dice.getKey()] = dice;\r\n    }\r\n}","import { D6 } from \"./D6\";\r\nimport { DiceFactory } from \"./DiceFactory\";\r\n\r\nexport { DiceFactory };\r\nexport * from \"./IDice\";\r\n\r\nDiceFactory.getInstance().RegisterDice(D6);","import { DiceOf } from \"./IDice\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport class D6 implements DiceOf<number> {\r\n    getKey(): string {\r\n        return \"D6\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Six Sided Die\";\r\n    }\r\n\r\n    getSides(): number[] {\r\n        return [1, 2, 3, 4, 5, 6];\r\n    }\r\n\r\n    roll(randomSeed: RandomSeed): number {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { DiceFactory, DiceKinds, Dice, DiceOf } from \"../DiceModel/index\";\r\nimport {\r\n    ComboBox,\r\n    IComboBoxOption,\r\n    Button\r\n} from 'office-ui-fabric-react/lib/index';\r\n\r\n\r\n\r\n\r\nexport interface DiceComboProps {\r\n    diceKinds: DiceKinds;\r\n    selected?: Dice | undefined;\r\n}\r\n\r\nexport class DiceCombo extends React.Component<DiceComboProps> {\r\n\r\n    public render(): JSX.Element {\r\n        const diceOptions = this.renderDiceOptions();\r\n        return <ComboBox\r\n            options={diceOptions}\r\n            selectedKey={this.props.selected && this.props.selected.getKey()}\r\n        />\r\n            ;\r\n    }\r\n    private renderDiceOptions(): IComboBoxOption[] {\r\n        const results = [];\r\n        for (const key in this.props.diceKinds) {\r\n            if (this.props.diceKinds.hasOwnProperty(key)) {\r\n                results.push({\r\n                    key: key,\r\n                    text: key\r\n                });\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\nexport interface DicePickerProps {\r\n    onAdd(dice: DiceOf<any>): void;\r\n}\r\ninterface DicePickerState {\r\n    dice: DiceKinds;\r\n    selected?: DiceOf<any>;\r\n}\r\n\r\nexport class DicePicker extends React.Component<DicePickerProps, DicePickerState> {\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        const dice = DiceFactory.getInstance().getDice();\r\n        this.state = {\r\n            dice: dice,\r\n            selected: dice[Object.keys(dice)[0]]\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return <div className=\"flex-horizontal\">\r\n            <DiceCombo\r\n                diceKinds={this.state.dice}\r\n                selected={this.state.selected}\r\n            />\r\n            <Button\r\n                label=\"AddButton\"\r\n                text=\"Add\"\r\n                onClick={this.onClick}\r\n                disabled={this.state.selected == null}\r\n            />\r\n        </div>\r\n            ;\r\n    }\r\n\r\n    public onClick = (): void => {\r\n        this.props.onAdd(this.state.selected!);\r\n    }\r\n}","import React from \"react\";\r\nimport { DiceOf } from \"../DiceModel/index\";\r\nimport { IconButton, getTheme } from \"office-ui-fabric-react/lib/index\";\r\n\r\ninterface DiceComponentProps {\r\n    dice: DiceOf<any>;\r\n    index: number;\r\n    remove: (index: number) => void;\r\n}\r\n\r\nexport class DiceComponent extends React.Component<DiceComponentProps> {\r\n    public render(): JSX.Element {\r\n        const theme = getTheme();\r\n        return (\r\n            <div>\r\n                {this.props.dice.getName()}\r\n                <IconButton\r\n                    text=\"Remove\"\r\n                    onClick={this.onClick}\r\n                    styles={{\r\n                        root: {\r\n                            color: theme.palette.blue,\r\n                            background: theme.palette.whiteTranslucent40,\r\n                        },\r\n                        rootHovered: {\r\n                            color: theme.palette.white,\r\n                            background: theme.palette.themeDarkAlt,\r\n                        },\r\n                    }}\r\n                    iconProps={{\r\n                        iconName: \"Delete\",\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    private onClick = (): void => {\r\n        this.props.remove(this.props.index);\r\n    };\r\n}\r\n","import React from 'react'\r\nimport { Dice, DiceOf } from '../DiceModel/index'\r\nimport { DiceComponent } from './DiceComponent'\r\n\r\ninterface DicePoolProps {\r\n    activeDice: Dice[]\r\n    onRemove: (index: number) => void\r\n}\r\nexport class DicePool extends React.Component<DicePoolProps> {\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = []\r\n        this.props.activeDice.forEach((item, index) => {\r\n            content.push(\r\n                <DiceComponent\r\n                    dice={item as DiceOf<any>}\r\n                    key={index}\r\n                    index={index}\r\n                    remove={this.props.onRemove}\r\n                />\r\n            )\r\n        })\r\n        return <> {content}</>\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DiceOf } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\ninterface DiceRollProps {\r\n    activeDice: DiceOf<any>[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class DiceRoll extends React.Component<DiceRollProps> {\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.props.activeDice.forEach((dice, index) => {\r\n            content.push(<div key={index}>{this.rollDice(dice)}</div>);\r\n        });\r\n        return <>{content}</>;\r\n    }\r\n\r\n    private rollDice(dice: DiceOf<any>): JSX.Element {\r\n        const options = dice.getSides();\r\n        const selection = this.props.randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    DetailsList,\r\n    DetailsListLayoutMode,\r\n} from \"office-ui-fabric-react/lib/DetailsList\";\r\n\r\nexport interface HistogramTableProps {\r\n    items: number[];\r\n}\r\nexport class HistogramTable extends React.Component<HistogramTableProps> {\r\n    public render(): JSX.Element {\r\n        const items = [];\r\n        for (let i = 0; i < this.props.items.length; i++) {\r\n            items.push({\r\n                key: i,\r\n                name: \"Roll \" + i,\r\n                value: this.props.items[i],\r\n            });\r\n        }\r\n        const columns = [];\r\n        return (\r\n            <>\r\n                <DetailsList\r\n                    items={items}\r\n                    layoutMode={DetailsListLayoutMode.fixedColumns}\r\n                    columns={[\r\n                        {\r\n                            key: \"column1\",\r\n                            name: \"Name\",\r\n                            fieldName: \"name\",\r\n                            minWidth: 100,\r\n                            maxWidth: 200,\r\n                            isResizable: true,\r\n                        },\r\n                        {\r\n                            key: \"column2\",\r\n                            name: \"Count\",\r\n                            fieldName: \"value\",\r\n                            minWidth: 100,\r\n                            maxWidth: 200,\r\n                            isResizable: true,\r\n                        },\r\n                    ]}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DiceOf } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport { HistogramTable } from \"./HistogramTable\";\r\n\r\ninterface ProbabilitiesViewProps {\r\n    activeDice: DiceOf<any>[];\r\n    randomSeed: RandomSeed;\r\n    iterations: number;\r\n}\r\ninterface RollOutcome {\r\n    rollOutCome: number[];\r\n    summary: number;\r\n}\r\n\r\ninterface ProbabilitiesViewState {\r\n    iterations: RollOutcome[];\r\n    histogram: number[];\r\n}\r\n\r\nexport class ProbabilitiesView extends React.Component<\r\n    ProbabilitiesViewProps,\r\n    ProbabilitiesViewState\r\n> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            iterations: [],\r\n            histogram: [],\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.regenerate();\r\n    }\r\n\r\n    public componentDidUpdate(newProps: ProbabilitiesViewProps) {\r\n        if (newProps !== this.props) {\r\n            this.regenerate();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                {this.state.histogram && (\r\n                    <HistogramTable items={this.state.histogram} />\r\n                )}\r\n                <PrimaryButton onClick={this.onClick} text=\"Generate\" />\r\n            </>\r\n        );\r\n    }\r\n\r\n    private rollDice(dice: DiceOf<any>): JSX.Element {\r\n        const options = dice.getSides();\r\n        const selection = this.props.randomSeed(options.length);\r\n        return options[selection];\r\n    }\r\n\r\n    private onClick = (): void => {\r\n        this.regenerate();\r\n    };\r\n\r\n    private regenerate() {\r\n        const iterations = [];\r\n        for (let index = 0; index < this.props.iterations; index++) {\r\n            const rollOutCome = this.generateRoll();\r\n            iterations[index] = {\r\n                rollOutCome: rollOutCome,\r\n                summary: this.summarize(rollOutCome),\r\n            };\r\n        }\r\n\r\n        this.setState({\r\n            iterations: iterations,\r\n            histogram: this.bucketize(iterations),\r\n        });\r\n    }\r\n\r\n    private bucketize(iterations: RollOutcome[]): number[] {\r\n        let histogram: number[] = [];\r\n        for (let index = 0; index < iterations.length; index++) {\r\n            const symbol = iterations[index].summary;\r\n\r\n            if (histogram[symbol] == null) {\r\n                histogram[symbol] = 1;\r\n            } else {\r\n                histogram[symbol]++;\r\n            }\r\n        }\r\n        return histogram;\r\n    }\r\n\r\n    private summarize(outcome: number[]): number {\r\n        let total = 0;\r\n        for (let index = 0; index < outcome.length; index++) {\r\n            total += outcome[index];\r\n        }\r\n        return total;\r\n    }\r\n\r\n    private generateRoll(): any[] {\r\n        const rolls: any[] = [];\r\n        this.props.activeDice.forEach((item, index) => {\r\n            rolls.push(item.roll(this.props.randomSeed));\r\n        });\r\n        return rolls;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DicePicker } from \"./DicePicker\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DicePool } from \"./DicePool\";\r\nimport { DiceRoll } from \"./DiceRoll\";\r\nimport { ProbabilitiesView } from \"./ProbabilitiesView\";\r\nimport { RandomSeed, create } from \"random-seed\";\r\n\r\ninterface ViewState {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class View extends React.Component<any, ViewState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            activeDice: [],\r\n            randomSeed: create(\"0\"),\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <DicePicker onAdd={this.onAddDice} />\r\n                <DicePool\r\n                    activeDice={this.state.activeDice}\r\n                    onRemove={this.onRemoveDice}\r\n                />\r\n                <DiceRoll\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                />\r\n                <ProbabilitiesView\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    iterations={10000}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    public onAddDice = (dice: Dice): void => {\r\n        this.state.activeDice.push(dice);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n\r\n    public onRemoveDice = (index: number): void => {\r\n        this.state.activeDice.splice(index, 1);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport './common.css';\r\nimport { View } from \"./UI/View\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <View />\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\n\r\ninitializeIcons(/* optional base url */);\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}