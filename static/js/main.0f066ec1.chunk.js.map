{"version":3,"sources":["DiceModel/D4.ts","DiceModel/D6.ts","DiceModel/D8.ts","DiceModel/D10.ts","DiceModel/D20.ts","DiceModel/D100.ts","DiceModel/DiceBase.ts","DiceModel/DiceFactory.ts","UI/DicePicker.tsx","DiceModel/DieGlyphs.tsx","UI/DiceResult.tsx","DiceModel/RollingModel.ts","UI/DiceRoll.tsx","UI/HistogramChart.tsx","UI/ProbabilitiesView.tsx","UI/View.tsx","App.tsx","serviceWorker.ts","index.tsx","DiceModel/SWRPG.ts","DiceModel/index.ts","DiceModel/D2.ts","DiceModel/D3.ts"],"names":["D4","_NumericDice","Object","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","NumericDice","D6","D8","D10","D20","D100","DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","randomSeed","options","getSides","range","length","_DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__","set","max","getFaceCount","i","face","push","DiceFactory","diceKinds","constructor","dice","getKey","instance","DiceCombo","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","concat","onChange","event","option","index","props","onSelect","inherits","createClass","diceOptions","renderDiceOptions","react_default","a","createElement","ComboBox","selectedKey","selected","results","hasOwnProperty","text","getName","React","Component","DicePicker","_React$Component2","_this2","onClick","onAdd","state","setState","getInstance","getDice","keys","className","DicePicker_DiceCombo","Button","label","disabled","glyphs","getGlyph","identifier","glyph","undefined","repeat","Math","abs","Fragment","mapGlyphs","absValue","content","toString","element","count","separate","result","css","DiceResult","id","IconButton","getShape","style","fontKerning","--fore-color","getForegroundColor","--back-color","getBackgroundColor","getGlyphs","itemCount","faceSize","getDimensions","iterations","dimensions","iteration","outcomeFaces","rollOutCome","indexOf","sort","b","localeCompare","getHistogram","dimension","histogram","iterationTotal","getValuesOfDimension","faces","generateRoll","activeDice","rolls","forEach","item","roll","DiceRoll","rollFaces","newProps","DiceResult_DiceResult","onRemove","outcome","PrimaryButton","dimensionName","_this3","rollDice","HistogramChart","labels","datasets","values","accum","accumulator","items","parseInt","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","j","err","return","data","yAxisID","backgroundColor","borderColor","type","height","es","maintainAspectRatio","animation","scales","yAxes","position","ticks","min","ProbabilitiesView","histograms","regenerating","regenerate","renderCharts","elements","Spinner","name","HistogramChart_HistogramChart","outcomes","getHistograms","View","onAddDice","onRemoveDice","splice","create","DicePicker_DicePicker","DiceRoll_DiceRoll","ProbabilitiesView_ProbabilitiesView","App","View_View","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","SWRPG_Difficulty","advantage","success","SWRPG_Ability","_DiceBase2","SWRPG_Proficiency","_DiceBase3","triumph","SWRPG_Challenge","_DiceBase4","despair","SWRPG_Force","_DiceBase5","force","SWRPG_Setback","_DiceBase6","SWRPG_Boost","_DiceBase7","_D2__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_D3__WEBPACK_IMPORTED_MODULE_1__","_D4__WEBPACK_IMPORTED_MODULE_2__","_D6__WEBPACK_IMPORTED_MODULE_3__","_D8__WEBPACK_IMPORTED_MODULE_4__","_D10__WEBPACK_IMPORTED_MODULE_5__","_D20__WEBPACK_IMPORTED_MODULE_6__","_D100__WEBPACK_IMPORTED_MODULE_7__","_SWRPG__WEBPACK_IMPORTED_MODULE_8__","_DiceFactory__WEBPACK_IMPORTED_MODULE_9__","d","__webpack_exports__","RegisterDice","D2","D3"],"mappings":"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","file":"static/js/main.0f066ec1.chunk.js","sourcesContent":["import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D4 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D4\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Four Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 4;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D6 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D6\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Six Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 6;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D8 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D8\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Eight Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 8;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D10 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D10\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Ten Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 10;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D20 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D20\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Twenty Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 20;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D100 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D100\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Hundred Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 100;\r\n    }\r\n}\r\n","import { Dice, Face } from \"./IDice\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport abstract class DiceBase implements Dice {\r\n    public abstract getKey(): string;\r\n    public abstract getName(): string;\r\n    public abstract getSides(): Face[];\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"square\";\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n\r\nexport abstract class NumericDice extends DiceBase {\r\n    public abstract getFaceCount(): number;\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [];\r\n        const max = this.getFaceCount();\r\n        for (let i = 1; i <= max; i++) {\r\n            const face = {\r\n                value: i,\r\n            } as Face;\r\n            set.push(face);\r\n        }\r\n        return set;\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { DiceConstructor, DiceKinds } from \"./IDice\";\r\n\r\n\r\nexport class DiceFactory {\r\n    private static instance: DiceFactory;\r\n    private diceKinds: DiceKinds;\r\n\r\n    private constructor() {\r\n        this.diceKinds = {};\r\n    }\r\n\r\n    static getInstance(): DiceFactory {\r\n        if (!DiceFactory.instance) {\r\n            DiceFactory.instance = new DiceFactory();\r\n        }\r\n        return DiceFactory.instance;\r\n    }\r\n\r\n    public getDice(): DiceKinds {\r\n        return this.diceKinds;\r\n    }\r\n\r\n    public RegisterDice(constructor: DiceConstructor<any>) {\r\n        const dice = new constructor();\r\n        this.diceKinds[dice.getKey()] = dice;\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport { DiceFactory, DiceKinds, Dice } from \"../DiceModel/index\";\r\nimport {\r\n    ComboBox,\r\n    IComboBox,\r\n    IComboBoxOption,\r\n    Button,\r\n} from \"office-ui-fabric-react/lib/index\";\r\n\r\nexport interface DiceComboProps {\r\n    diceKinds: DiceKinds;\r\n    selected?: Dice | undefined;\r\n    onSelect: (dice: Dice) => void;\r\n}\r\n\r\nexport class DiceCombo extends React.Component<DiceComboProps> {\r\n    public render(): JSX.Element {\r\n        const diceOptions = this.renderDiceOptions();\r\n        return (\r\n            <ComboBox\r\n                options={diceOptions}\r\n                selectedKey={\r\n                    this.props.selected && this.props.selected.getKey()\r\n                }\r\n                onChange={this.onChange}\r\n            />\r\n        );\r\n    }\r\n    private renderDiceOptions(): IComboBoxOption[] {\r\n        const results = [];\r\n        for (const key in this.props.diceKinds) {\r\n            if (this.props.diceKinds.hasOwnProperty(key)) {\r\n                results.push({\r\n                    key: key,\r\n                    text: this.props.diceKinds[key].getName(),\r\n                });\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private onChange = (\r\n        event: React.FormEvent<IComboBox>,\r\n        option?: IComboBoxOption,\r\n        index?: number,\r\n        value?: string\r\n    ): void => {\r\n        this.props.onSelect(this.props.diceKinds[option!.key!]);\r\n    };\r\n}\r\n\r\nexport interface DicePickerProps {\r\n    onAdd(dice: Dice): void;\r\n}\r\ninterface DicePickerState {\r\n    dice: DiceKinds;\r\n    selected?: Dice;\r\n}\r\n\r\nexport class DicePicker extends React.Component<\r\n    DicePickerProps,\r\n    DicePickerState\r\n> {\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        const dice = DiceFactory.getInstance().getDice();\r\n        this.state = {\r\n            dice: dice,\r\n            selected: dice[Object.keys(dice)[0]],\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"flex-horizontal\">\r\n                <DiceCombo\r\n                    diceKinds={this.state.dice}\r\n                    selected={this.state.selected}\r\n                    onSelect={this.onSelect}\r\n                />\r\n                <Button\r\n                    label=\"AddButton\"\r\n                    text=\"Add\"\r\n                    onClick={this.onClick}\r\n                    disabled={this.state.selected == null}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClick = (): void => {\r\n        this.props.onAdd(this.state.selected!);\r\n    };\r\n    public onSelect = (dice: Dice): void => {\r\n        this.setState({ selected: dice as any });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./DieGlyphs.css\";\r\nimport { css } from \"@uifabric/utilities\";\r\nexport const advantage = \"advantage\";\r\nexport const success = \"success\";\r\nexport const triumph = \"triumph\";\r\nexport const despair = \"despair\";\r\nexport const number = \"number\";\r\nexport const force = \"force\";\r\n\r\nconst glyphs: {\r\n    [key: string]: (count: number) => JSX.Element;\r\n} = {};\r\nglyphs[advantage] = (count: number) => {\r\n    const glyph = count > 0 ? \"advantage\" : \"disadvantage\";\r\n    return <span className={css(\"die-glyph\", glyph)} />;\r\n};\r\nglyphs[success] = (count: number) => {\r\n    const glyph = count > 0 ? \"success\" : \"failure\";\r\n    return <span className={css(\"die-glyph\", glyph)} />;\r\n};\r\nglyphs[triumph] = (count: number) => {\r\n    return <span className={css(\"die-glyph\", \"triumph\")} />;\r\n};\r\nglyphs[despair] = (count: number) => {\r\n    return <span className={css(\"die-glyph\", \"despair\")} />;\r\n};\r\n\r\nglyphs[force] = (count: number) => {\r\n    const glyph = count > 0 ? \"light-side\" : \"dark-side\";\r\n    return <span className={css(\"die-glyph\", glyph)} />;\r\n};\r\n\r\nexport function getGlyph(identifier: string, value: number): JSX.Element {\r\n    const glyph = glyphs[identifier];\r\n    return glyph !== undefined ? repeat(glyph(value), Math.abs(value)) : <></>;\r\n}\r\n\r\nexport function mapGlyphs(identifier: string, value: number): JSX.Element {\r\n    const glyph = glyphs[identifier];\r\n    const absValue = Math.abs(value);\r\n    const content =\r\n        glyph !== undefined\r\n            ? repeat(glyph(value), absValue, true)\r\n            : absValue.toString();\r\n    return (\r\n        <>\r\n            <span key={identifier}>{content}</span>\r\n            <br key={identifier + \"br\"} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction repeat(\r\n    element: JSX.Element,\r\n    count: number,\r\n    separate?: boolean\r\n): JSX.Element {\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n        result.push(element);\r\n        if (i !== count - 1 && separate) {\r\n            result.push(<br />);\r\n        }\r\n    }\r\n    return <>{result}</>;\r\n}\r\n","import React from \"react\";\r\nimport { Face, Dice } from \"../DiceModel/IDice\";\r\nimport { mapGlyphs } from \"../DiceModel/DieGlyphs\";\r\nimport \"./DiceResult.css\";\r\nimport { css } from \"@uifabric/utilities\";\r\nimport { IconButton } from \"office-ui-fabric-react/lib/index\";\r\n\r\ninterface DiceResultProps {\r\n    id: number;\r\n    dice: Dice;\r\n    face: Face;\r\n    onClick: (id: number) => void;\r\n}\r\n/** Renders a set of glyphs associated with a given face on a  dice */\r\nexport class DiceResult extends React.Component<DiceResultProps> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <IconButton className=\"dice-button\" onClick={this.onClick}>\r\n                <div\r\n                    className={css(this.props.dice.getShape(), \"dice-result\")}\r\n                    style={{\r\n                        fontKerning: \"auto\",\r\n                        \"--fore-color\": this.props.dice.getForegroundColor(),\r\n                        \"--back-color\": this.props.dice.getBackgroundColor(),\r\n                    }}\r\n                >\r\n                    {this.getGlyphs()}\r\n                </div>\r\n            </IconButton>\r\n        );\r\n    }\r\n    private onClick = (): void => {\r\n        if (this.props.onClick) this.props.onClick(this.props.id);\r\n    };\r\n\r\n    private getGlyphs(): JSX.Element[] {\r\n        const results: JSX.Element[] = [];\r\n        const itemCount = Object.keys(this.props.face).length;\r\n        for (const key in this.props.face) {\r\n            if (this.props.face.hasOwnProperty(key)) {\r\n                const count = this.props.face[key];\r\n\r\n                const faceSize =\r\n                    itemCount === 1 && Math.abs(count) === 1\r\n                        ? \"large-face\"\r\n                        : \"small-face\";\r\n\r\n                results.push(\r\n                    <span key={key} className={css(\"value\", faceSize)}>\r\n                        {mapGlyphs(key, count)}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (itemCount === 0) {\r\n            results.push(\r\n                <span className={css(\"value\", \"no-items\")}>{\"\"} </span>\r\n            );\r\n        }\r\n        return results;\r\n    }\r\n}\r\n","import { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport interface RollOutcome {\r\n    rollOutCome: Face[];\r\n}\r\n\r\nexport interface Histogram {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\nexport function getDimensions(iterations: RollOutcome[]): string[] {\r\n    const dimensions: string[] = [];\r\n    for (let iteration = 0; iteration < iterations.length; iteration++) {\r\n        const outcomeFaces = iterations[iteration].rollOutCome;\r\n        for (let face = 0; face < outcomeFaces.length; face++) {\r\n            for (const key in outcomeFaces[face]) {\r\n                if (outcomeFaces[face].hasOwnProperty(key)) {\r\n                    if (dimensions.indexOf(key) === -1) {\r\n                        dimensions.push(key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return dimensions.sort((a: string, b: string) => {\r\n        return a.localeCompare(b);\r\n    });\r\n}\r\n\r\nexport function getHistograms(\r\n    outcomes: RollOutcome[],\r\n    dimensions: string[]\r\n): Histogram[] {\r\n    const histograms = [];\r\n    for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n        const dimensionName = dimensions[dimension];\r\n        histograms.push({\r\n            name: dimensionName,\r\n            data: getHistogram(outcomes, dimensionName),\r\n        });\r\n    }\r\n    return histograms;\r\n}\r\n\r\nexport function getHistogram(\r\n    iterations: RollOutcome[],\r\n    dimension: string\r\n): number[] {\r\n    let histogram: number[] = [];\r\n\r\n    for (let index = 0; index < iterations.length; index++) {\r\n        const faces = iterations[index].rollOutCome;\r\n        let iterationTotal = getValuesOfDimension(faces, dimension);\r\n\r\n        if (histogram[iterationTotal] == null) {\r\n            histogram[iterationTotal] = 1;\r\n        } else {\r\n            histogram[iterationTotal]++;\r\n        }\r\n    }\r\n    return histogram;\r\n}\r\n\r\nexport function getValuesOfDimension(faces: Face[], dimension: string) {\r\n    let iterationTotal = 0;\r\n    for (let face = 0; face < faces.length; face++) {\r\n        const result = faces[face][dimension];\r\n        if (result != null) {\r\n            iterationTotal += result != null ? result : 0;\r\n        }\r\n    }\r\n    return iterationTotal;\r\n}\r\n\r\nexport function generateRoll(\r\n    activeDice: Dice[],\r\n    randomSeed: RandomSeed\r\n): Face[] {\r\n    const rolls: any[] = [];\r\n    activeDice.forEach((item, index) => {\r\n        rolls.push(item.roll(randomSeed));\r\n    });\r\n    return rolls;\r\n}\r\n","import React from \"react\";\r\nimport { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { DiceResult } from \"./DiceResult\";\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport { getGlyph } from \"../DiceModel/DieGlyphs\";\r\nimport \"./DiceRoll.css\";\r\n\r\nimport {\r\n    RollOutcome,\r\n    getValuesOfDimension,\r\n    getDimensions,\r\n} from \"../DiceModel/RollingModel\";\r\n\r\ninterface DiceRollProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n    onRemove: (index: number) => void;\r\n}\r\n\r\nexport interface DiceRollState {\r\n    faces: Face[];\r\n}\r\n\r\nexport class DiceRoll extends React.Component<DiceRollProps, DiceRollState> {\r\n    public constructor(props: DiceRollProps) {\r\n        super(props);\r\n        this.state = { faces: [] };\r\n    }\r\n\r\n    public componentWillReceiveProps(newProps: DiceRollProps) {\r\n        if (newProps !== this.props) {\r\n            this.rollFaces(newProps);\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.state.faces.forEach((face, index) => {\r\n            content.push(\r\n                <DiceResult\r\n                    face={this.state.faces[index]}\r\n                    dice={this.props.activeDice[index]}\r\n                    key={index}\r\n                    id={index}\r\n                    onClick={this.props.onRemove}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <>\r\n                <div className=\"dice-roll flex-row\">{content}</div>\r\n                {this.outcome()}\r\n\r\n                {this.props.activeDice.length > 0 && (\r\n                    <PrimaryButton onClick={this.onClick} text=\"Re-Roll\" />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private outcome(): JSX.Element {\r\n        const outcome: RollOutcome = {\r\n            rollOutCome: this.state.faces,\r\n        };\r\n\r\n        const dimensions = getDimensions([outcome]);\r\n        const results = [];\r\n        for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n            const dimensionName = dimensions[dimension];\r\n            const count = getValuesOfDimension(this.state.faces, dimensionName);\r\n            results.push(\r\n                <div>\r\n                    <span>\r\n                        {getGlyph(dimensionName, count)} {dimensionName}{\" \"}\r\n                    </span>\r\n                    <span>{count}</span>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <br />\r\n                Outcome Dimensions:{results}\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onClick = (): void => {\r\n        this.rollFaces(this.props);\r\n    };\r\n\r\n    private rollFaces(props: DiceRollProps): void {\r\n        const faces: Face[] = [];\r\n        props.activeDice.forEach((dice, index) => {\r\n            faces.push(this.rollDice(dice));\r\n        });\r\n        this.setState({ faces: faces });\r\n    }\r\n\r\n    private rollDice(dice: Dice): Face {\r\n        const options = dice.getSides();\r\n        const selection = this.props.randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { Bar } from \"react-chartjs-2\";\r\nimport React from \"react\";\r\n\r\nexport interface HistogramChartProps {\r\n    items: number[];\r\n    iterations: number;\r\n}\r\nexport class HistogramChart extends React.Component<HistogramChartProps> {\r\n    public render(): JSX.Element {\r\n        const labels = [];\r\n        const datasets = [];\r\n        const values: number[] = [];\r\n        const accum: number[] = [];\r\n\r\n        let accumulator = 0;\r\n\r\n        const keys = Object.keys(this.props.items).sort((a, b) => {\r\n            return parseInt(a) - parseInt(b);\r\n        });\r\n        for (const i of keys) {\r\n            labels.push(i + \"\");\r\n            const j = parseInt(i);\r\n            const value =\r\n                this.props.items[j] != null\r\n                    ? this.props.items[j] / this.props.iterations\r\n                    : 0;\r\n            accumulator += value;\r\n            values.push(value);\r\n            accum.push(accumulator);\r\n        }\r\n\r\n        datasets.push({\r\n            label: \"Probability\",\r\n            data: values,\r\n            yAxisID: \"A\",\r\n            backgroundColor: \"rgb(200, 200, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        datasets.push({\r\n            label: \"CDF\",\r\n            data: accum,\r\n            yAxisID: \"B\",\r\n            type: \"line\",\r\n            backgroundColor: \"rgb(255, 255, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        const chartOptions = {\r\n            maintainAspectRatio: false,\r\n            animation: false,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        id: \"A\",\r\n                        type: \"linear\",\r\n                        position: \"left\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                    {\r\n                        id: \"B\",\r\n                        type: \"linear\",\r\n                        position: \"right\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        } as Chart.ChartOptions;\r\n        return (\r\n            <div style={{ height: \"250px\" }}>\r\n                <Bar\r\n                    options={chartOptions}\r\n                    data={{\r\n                        labels: labels,\r\n                        datasets: datasets,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { HistogramChart } from \"./HistogramChart\";\r\nimport { Spinner } from \"office-ui-fabric-react/lib/Spinner\";\r\nimport {\r\n    Histogram,\r\n    RollOutcome,\r\n    generateRoll,\r\n    getDimensions,\r\n    getHistograms,\r\n} from \"../DiceModel/RollingModel\";\r\n\r\ninterface ProbabilitiesViewProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n    iterations: number;\r\n}\r\ninterface ProbabilitiesViewState {\r\n    iterations: RollOutcome[];\r\n    histograms: Histogram[];\r\n    regenerating: boolean;\r\n}\r\n\r\nexport class ProbabilitiesView extends React.Component<\r\n    ProbabilitiesViewProps,\r\n    ProbabilitiesViewState\r\n> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            iterations: [],\r\n            histograms: [],\r\n            regenerating: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.regenerate();\r\n    }\r\n\r\n    public componentDidUpdate(newProps: ProbabilitiesViewProps) {\r\n        if (newProps !== this.props) {\r\n            this.regenerate();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return <>{this.state.histograms && this.renderCharts()}</>;\r\n    }\r\n\r\n    private renderCharts(): JSX.Element[] {\r\n        const elements: JSX.Element[] = [];\r\n\r\n        if (this.state.regenerating) {\r\n            elements.push(<Spinner key={0} />);\r\n        }\r\n\r\n        for (const key in this.state.histograms) {\r\n            if (this.state.histograms.hasOwnProperty(key)) {\r\n                const element = this.state.histograms[key];\r\n\r\n                elements.push(\r\n                    <div key={key}>\r\n                        <span>{element.name}</span>\r\n                        <HistogramChart\r\n                            items={element.data}\r\n                            iterations={this.props.iterations}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    private regenerate() {\r\n        const iterations = [];\r\n        for (let index = 0; index < this.props.iterations; index++) {\r\n            const rollOutCome = generateRoll(\r\n                this.props.activeDice,\r\n                this.props.randomSeed\r\n            );\r\n            iterations[index] = {\r\n                rollOutCome: rollOutCome,\r\n            };\r\n        }\r\n\r\n        const dimensions = getDimensions(iterations);\r\n        const histograms = getHistograms(iterations, dimensions);\r\n\r\n        this.setState({\r\n            iterations: iterations,\r\n            histograms: histograms,\r\n            regenerating: false,\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DicePicker } from \"./DicePicker\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DiceRoll } from \"./DiceRoll\";\r\nimport { ProbabilitiesView } from \"./ProbabilitiesView\";\r\nimport { RandomSeed, create } from \"random-seed\";\r\n\r\ninterface ViewState {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class View extends React.Component<any, ViewState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            activeDice: [],\r\n            randomSeed: create(\"0\"),\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <DicePicker onAdd={this.onAddDice} />\r\n                <DiceRoll\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    onRemove={this.onRemoveDice}\r\n                />\r\n                <ProbabilitiesView\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    iterations={50000}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    public onAddDice = (dice: Dice): void => {\r\n        this.state.activeDice.push(dice);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n\r\n    public onRemoveDice = (index: number): void => {\r\n        this.state.activeDice.splice(index, 1);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./common.css\";\r\nimport { View } from \"./UI/View\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <View />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\n\r\ninitializeIcons(/* optional base url */);\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class SWRPG_Difficulty extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Difficulty\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Difficulty\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#8800AA\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"triangle\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {},\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Ability extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Ability\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Ability\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#00D400\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"triangle\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Proficiency extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Proficiency\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Proficiency\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#FFEA01\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                triumph: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Challenge extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Challenge\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Challenge\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"red\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {\r\n                despair: 1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Force extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Force\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Force\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#EFEFEF\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 1,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: 2,\r\n            },\r\n            {\r\n                force: -1,\r\n            },\r\n            {\r\n                force: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Setback extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Setback\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Setback\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Boost extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Boost\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Boost\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#ABDEF7\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { D2 } from \"./D2\";\r\nimport { D3 } from \"./D3\";\r\nimport { D4 } from \"./D4\";\r\nimport { D6 } from \"./D6\";\r\nimport { D8 } from \"./D8\";\r\nimport { D10 } from \"./D10\";\r\nimport { D20 } from \"./D20\";\r\nimport { D100 } from \"./D100\";\r\nimport {\r\n    SWRPG_Difficulty,\r\n    SWRPG_Ability,\r\n    SWRPG_Boost,\r\n    SWRPG_Challenge,\r\n    SWRPG_Force,\r\n    SWRPG_Proficiency,\r\n    SWRPG_Setback,\r\n} from \"./SWRPG\";\r\nimport { DiceFactory } from \"./DiceFactory\";\r\n\r\nexport { DiceFactory };\r\nexport * from \"./IDice\";\r\n\r\nDiceFactory.getInstance().RegisterDice(D2);\r\nDiceFactory.getInstance().RegisterDice(D3);\r\nDiceFactory.getInstance().RegisterDice(D6);\r\nDiceFactory.getInstance().RegisterDice(D4);\r\nDiceFactory.getInstance().RegisterDice(D8);\r\nDiceFactory.getInstance().RegisterDice(D10);\r\nDiceFactory.getInstance().RegisterDice(D20);\r\nDiceFactory.getInstance().RegisterDice(D100);\r\n\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Difficulty);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Ability);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Boost);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Challenge);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Force);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Proficiency);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Setback);\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class D2 extends DiceBase {\r\n    getKey(): string {\r\n        return \"D2\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Coin\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                value: 0,\r\n            },\r\n            {\r\n                value: 1,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D3 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D3\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Three Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 3;\r\n    }\r\n}\r\n"],"sourceRoot":""}