{"version":3,"sources":["DiceModel/D4.ts","DiceModel/D6.ts","DiceModel/D8.ts","DiceModel/D10.ts","DiceModel/D20.ts","DiceModel/D100.ts","workers/worker.ts","DiceModel/DiceBase.ts","DiceModel/DiceFactory.ts","UI/DicePicker.tsx","DiceModel/DieGlyphs.tsx","UI/DiceResult.tsx","DiceModel/RollingModel.ts","UI/DiceRoll.tsx","UI/HistogramChart.tsx","OperationModel/OperationFactory.ts","OperationModel/DiceRollOperation.ts","WorkClient.ts","UI/ProbabilitiesView.tsx","UI/View.tsx","App.tsx","serviceWorker.ts","index.tsx","DiceModel/SWRPG.ts","DiceModel/index.ts","DiceModel/D2.ts","DiceModel/D3.ts"],"names":["D4","_NumericDice","Object","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","NumericDice","D6","D8","D10","D20","D100","module","exports","Worker","__webpack_require__","p","DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_4__","randomSeed","options","getSides","range","length","_DiceBase","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_0__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_1__","D_Peter_s_Archive_dev_Jul_2018_Rollo_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_2__","set","max","getFaceCount","i","face","push","DiceFactory","diceKinds","constructor","dice","getKey","instance","DiceCombo","_React$Component","_getPrototypeOf2","_this","classCallCheck","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","concat","onChange","event","option","index","props","onSelect","inherits","createClass","diceOptions","renderDiceOptions","react_default","a","createElement","ComboBox","selectedKey","selected","results","hasOwnProperty","text","getName","React","Component","DicePicker","_React$Component2","_this2","onClick","onAdd","state","setState","getInstance","getDice","keys","className","DicePicker_DiceCombo","PrimaryButton","label","disabled","glyphs","getGlyph","identifier","glyph","undefined","repeat","Math","abs","Fragment","mapGlyphs","absValue","content","toString","element","count","separate","result","css","DiceResult","id","IconButton","getShape","style","fontKerning","--fore-color","getForegroundColor","--back-color","getBackgroundColor","getGlyphs","itemCount","faceSize","getDimensions","iterations","dimensions","iteration","outcomeFaces","rollOutCome","indexOf","sort","b","localeCompare","getHistograms","outcomes","histograms","dimension","dimensionName","name","data","getHistogram","histogram","iterationTotal","getValuesOfDimension","faces","generateRoll","activeDice","rolls","forEach","item","roll","DiceRoll","rollFaces","newProps","DiceResult_DiceResult","onRemove","outcome","_this3","rollDice","HistogramChart","labels","datasets","values","accum","accumulator","items","parseInt","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","j","err","return","yAxisID","backgroundColor","borderColor","type","height","es","maintainAspectRatio","animation","scales","yAxes","position","ticks","min","OperationFactory","cache","operationName","params","DiceRollOperation","getType","JSON","stringify","getParams","Name","_runOperation","asyncToGenerator","regenerator_default","mark","_callee","queryResultCache","rollOutcomes","_index","wrap","_context","prev","create","iterationsCount","abrupt","rollOutComes","stop","_x","RegisterConstructor","WorkClient","worker","LocalWorker","operation","payload","promise","Promise","resolve","reject","addEventListener","handler","response","parsedResponse","parse","removeEventListener","postMessage","ProbabilitiesView","regenerating","regenerate","renderCharts","elements","Spinner","HistogramChart_HistogramChart","_regenerate","client","map","runOperation","sent","View","onAddDice","onRemoveDice","splice","DicePicker_DicePicker","DiceRoll_DiceRoll","ProbabilitiesView_ProbabilitiesView","App","View_View","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","SWRPG_Difficulty","advantage","success","SWRPG_Ability","_DiceBase2","SWRPG_Proficiency","_DiceBase3","triumph","SWRPG_Challenge","_DiceBase4","despair","SWRPG_Force","_DiceBase5","light","dark","SWRPG_Setback","_DiceBase6","SWRPG_Boost","_DiceBase7","_D2__WEBPACK_IMPORTED_MODULE_0__","_D3__WEBPACK_IMPORTED_MODULE_1__","_D4__WEBPACK_IMPORTED_MODULE_2__","_D6__WEBPACK_IMPORTED_MODULE_3__","_D8__WEBPACK_IMPORTED_MODULE_4__","_D10__WEBPACK_IMPORTED_MODULE_5__","_D20__WEBPACK_IMPORTED_MODULE_6__","_D100__WEBPACK_IMPORTED_MODULE_7__","_SWRPG__WEBPACK_IMPORTED_MODULE_8__","_DiceFactory__WEBPACK_IMPORTED_MODULE_9__","d","__webpack_exports__","RegisterDice","D2","D3"],"mappings":"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","file":"static/js/main.ad64d89a.chunk.js","sourcesContent":["import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D4 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D4\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Four Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 4;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D6 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D6\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Six Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 6;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D8 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D8\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Eight Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 8;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D10 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D10\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Ten Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 10;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D20 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D20\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Twenty Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 20;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D100 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D100\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Hundred Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 100;\r\n    }\r\n}\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"c81b5ccbdd7fa67a33ad.worker.js\");\n};","import { Dice, Face } from \"./IDice\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport abstract class DiceBase implements Dice {\r\n    public abstract getKey(): string;\r\n    public abstract getName(): string;\r\n    public abstract getSides(): Face[];\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"square\";\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n\r\nexport abstract class NumericDice extends DiceBase {\r\n    public abstract getFaceCount(): number;\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [];\r\n        const max = this.getFaceCount();\r\n        for (let i = 1; i <= max; i++) {\r\n            const face = {\r\n                value: i,\r\n            } as Face;\r\n            set.push(face);\r\n        }\r\n        return set;\r\n    }\r\n\r\n    public roll(randomSeed: RandomSeed): Face {\r\n        const options = this.getSides();\r\n        const selection = randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { DiceConstructor, DiceKinds } from \"./IDice\";\r\n\r\n\r\nexport class DiceFactory {\r\n    private static instance: DiceFactory;\r\n    private diceKinds: DiceKinds;\r\n\r\n    private constructor() {\r\n        this.diceKinds = {};\r\n    }\r\n\r\n    static getInstance(): DiceFactory {\r\n        if (!DiceFactory.instance) {\r\n            DiceFactory.instance = new DiceFactory();\r\n        }\r\n        return DiceFactory.instance;\r\n    }\r\n\r\n    public getDice(): DiceKinds {\r\n        return this.diceKinds;\r\n    }\r\n\r\n    public RegisterDice(constructor: DiceConstructor<any>) {\r\n        const dice = new constructor();\r\n        this.diceKinds[dice.getKey()] = dice;\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport { DiceFactory, DiceKinds, Dice } from \"../DiceModel/index\";\r\nimport {\r\n    ComboBox,\r\n    IComboBox,\r\n    IComboBoxOption,\r\n    PrimaryButton,\r\n} from \"office-ui-fabric-react/lib/index\";\r\n\r\nexport interface DiceComboProps {\r\n    diceKinds: DiceKinds;\r\n    selected?: Dice | undefined;\r\n    onSelect: (dice: Dice) => void;\r\n}\r\n\r\nexport class DiceCombo extends React.Component<DiceComboProps> {\r\n    public render(): JSX.Element {\r\n        const diceOptions = this.renderDiceOptions();\r\n        return (\r\n            <ComboBox\r\n                options={diceOptions}\r\n                selectedKey={\r\n                    this.props.selected && this.props.selected.getKey()\r\n                }\r\n                onChange={this.onChange}\r\n            />\r\n        );\r\n    }\r\n    private renderDiceOptions(): IComboBoxOption[] {\r\n        const results = [];\r\n        for (const key in this.props.diceKinds) {\r\n            if (this.props.diceKinds.hasOwnProperty(key)) {\r\n                results.push({\r\n                    key: key,\r\n                    text: this.props.diceKinds[key].getName(),\r\n                });\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    private onChange = (\r\n        event: React.FormEvent<IComboBox>,\r\n        option?: IComboBoxOption,\r\n        index?: number,\r\n        value?: string\r\n    ): void => {\r\n        this.props.onSelect(this.props.diceKinds[option!.key!]);\r\n    };\r\n}\r\n\r\nexport interface DicePickerProps {\r\n    onAdd(dice: Dice): void;\r\n}\r\ninterface DicePickerState {\r\n    dice: DiceKinds;\r\n    selected?: Dice;\r\n}\r\n\r\nexport class DicePicker extends React.Component<\r\n    DicePickerProps,\r\n    DicePickerState\r\n> {\r\n    constructor(props: Readonly<any>) {\r\n        super(props);\r\n        const dice = DiceFactory.getInstance().getDice();\r\n        this.state = {\r\n            dice: dice,\r\n            selected: dice[Object.keys(dice)[0]],\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"flex-horizontal\">\r\n                <DiceCombo\r\n                    diceKinds={this.state.dice}\r\n                    selected={this.state.selected}\r\n                    onSelect={this.onSelect}\r\n                />\r\n                <PrimaryButton\r\n                    label=\"AddButton\"\r\n                    text=\"Add\"\r\n                    onClick={this.onClick}\r\n                    disabled={this.state.selected == null}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onClick = (): void => {\r\n        this.props.onAdd(this.state.selected!);\r\n    };\r\n    public onSelect = (dice: Dice): void => {\r\n        this.setState({ selected: dice as any });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./DieGlyphs.css\";\r\nimport { css } from \"@uifabric/utilities\";\r\nexport const advantage = \"advantage\";\r\nexport const success = \"success\";\r\nexport const triumph = \"triumph\";\r\nexport const despair = \"despair\";\r\nexport const number = \"number\";\r\nexport const light = \"light\";\r\nexport const dark = \"dark\";\r\n\r\nconst glyphs: {\r\n    [key: string]: (count: number) => JSX.Element;\r\n} = {};\r\nglyphs[advantage] = (count: number): JSX.Element => {\r\n    const glyph = count > 0 ? \"advantage\" : \"disadvantage\";\r\n    return <span className={css(\"die-glyph\", glyph)} />;\r\n};\r\nglyphs[success] = (count: number): JSX.Element => {\r\n    const glyph = count > 0 ? \"success\" : \"failure\";\r\n    return <span className={css(\"die-glyph\", glyph)} />;\r\n};\r\nglyphs[triumph] = (count: number): JSX.Element => {\r\n    return <span className={css(\"die-glyph\", \"triumph\")} />;\r\n};\r\nglyphs[despair] = (count: number): JSX.Element => {\r\n    return <span className={css(\"die-glyph\", \"despair\")} />;\r\n};\r\nglyphs[light] = (count: number): JSX.Element => {\r\n    return <span key={count} className={css(\"die-glyph\", \"light-side\")} />;\r\n};\r\nglyphs[dark] = (count: number): JSX.Element => {\r\n    return <span key={count} className={css(\"die-glyph\", \"dark-side\")} />;\r\n};\r\n\r\nexport function getGlyph(identifier: string, value: number): JSX.Element {\r\n    const glyph = glyphs[identifier];\r\n    return glyph !== undefined ? repeat(glyph(value), Math.abs(value)) : <></>;\r\n}\r\n\r\nexport function mapGlyphs(identifier: string, value: number): JSX.Element {\r\n    const glyph = glyphs[identifier];\r\n    const absValue = Math.abs(value);\r\n    const content =\r\n        glyph !== undefined\r\n            ? repeat(glyph(value), absValue, true)\r\n            : absValue.toString();\r\n    return (\r\n        <>\r\n            <span key={identifier}>{content}</span>\r\n            <br key={identifier + \"br\"} />\r\n        </>\r\n    );\r\n}\r\n\r\nfunction repeat(\r\n    element: JSX.Element,\r\n    count: number,\r\n    separate?: boolean\r\n): JSX.Element {\r\n    const result = [];\r\n    for (let i = 0; i < count; i++) {\r\n        result.push(<span key={i}>{element}</span>);\r\n        if (i !== count - 1 && separate) {\r\n            result.push(<br key={i + \"br\"} />);\r\n        }\r\n    }\r\n    return <>{result}</>;\r\n}\r\n","import React from \"react\";\r\nimport { Face, Dice } from \"../DiceModel/IDice\";\r\nimport { mapGlyphs } from \"../DiceModel/DieGlyphs\";\r\nimport \"./DiceResult.css\";\r\nimport { css } from \"@uifabric/utilities\";\r\nimport { IconButton } from \"office-ui-fabric-react/lib/index\";\r\n\r\ninterface DiceResultProps {\r\n    id: number;\r\n    dice: Dice;\r\n    face: Face;\r\n    onClick: (id: number) => void;\r\n}\r\n/** Renders a set of glyphs associated with a given face on a  dice */\r\nexport class DiceResult extends React.Component<DiceResultProps> {\r\n    public render(): JSX.Element {\r\n        return (\r\n            <IconButton className=\"dice-button\" onClick={this.onClick}>\r\n                <div\r\n                    className={css(this.props.dice.getShape(), \"dice-result\")}\r\n                    style={{\r\n                        fontKerning: \"auto\",\r\n                        \"--fore-color\": this.props.dice.getForegroundColor(),\r\n                        \"--back-color\": this.props.dice.getBackgroundColor(),\r\n                    }}\r\n                >\r\n                    {this.getGlyphs()}\r\n                </div>\r\n            </IconButton>\r\n        );\r\n    }\r\n    private onClick = (): void => {\r\n        if (this.props.onClick) this.props.onClick(this.props.id);\r\n    };\r\n\r\n    private getGlyphs(): JSX.Element[] {\r\n        const results: JSX.Element[] = [];\r\n        const itemCount = Object.keys(this.props.face).length;\r\n        for (const key in this.props.face) {\r\n            if (this.props.face.hasOwnProperty(key)) {\r\n                const count = this.props.face[key];\r\n\r\n                const faceSize =\r\n                    itemCount === 1 && Math.abs(count) === 1\r\n                        ? \"large-face\"\r\n                        : \"small-face\";\r\n\r\n                results.push(\r\n                    <span key={key} className={css(\"value\", faceSize)}>\r\n                        {mapGlyphs(key, count)}\r\n                    </span>\r\n                );\r\n            }\r\n        }\r\n\r\n        if (itemCount === 0) {\r\n            results.push(\r\n                <span key={itemCount} className={css(\"value\", \"no-items\")} />\r\n            );\r\n        }\r\n        return results;\r\n    }\r\n}\r\n","import { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\n\r\nexport interface RollOutcome {\r\n    rollOutCome: Face[];\r\n}\r\n\r\nexport interface Histogram {\r\n    name: string;\r\n    data: number[];\r\n}\r\n\r\nexport function getDimensions(iterations: RollOutcome[]): string[] {\r\n    const dimensions: string[] = [];\r\n    for (let iteration = 0; iteration < iterations.length; iteration++) {\r\n        const outcomeFaces = iterations[iteration].rollOutCome;\r\n        for (let face = 0; face < outcomeFaces.length; face++) {\r\n            for (const key in outcomeFaces[face]) {\r\n                if (outcomeFaces[face].hasOwnProperty(key)) {\r\n                    if (dimensions.indexOf(key) === -1) {\r\n                        dimensions.push(key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return dimensions.sort((a: string, b: string) => {\r\n        return a.localeCompare(b);\r\n    });\r\n}\r\n\r\nexport function getHistograms(\r\n    outcomes: RollOutcome[],\r\n    dimensions: string[]\r\n): Histogram[] {\r\n    const histograms = [];\r\n    for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n        const dimensionName = dimensions[dimension];\r\n        histograms.push({\r\n            name: dimensionName,\r\n            data: getHistogram(outcomes, dimensionName),\r\n        });\r\n    }\r\n    return histograms;\r\n}\r\n\r\nexport function getHistogram(\r\n    iterations: RollOutcome[],\r\n    dimension: string\r\n): number[] {\r\n    let histogram: number[] = [];\r\n\r\n    for (let index = 0; index < iterations.length; index++) {\r\n        const faces = iterations[index].rollOutCome;\r\n        let iterationTotal = getValuesOfDimension(faces, dimension);\r\n\r\n        if (histogram[iterationTotal] == null) {\r\n            histogram[iterationTotal] = 1;\r\n        } else {\r\n            histogram[iterationTotal]++;\r\n        }\r\n    }\r\n    return histogram;\r\n}\r\n\r\nexport function getValuesOfDimension(faces: Face[], dimension: string) {\r\n    let iterationTotal = 0;\r\n    for (let face = 0; face < faces.length; face++) {\r\n        const result = faces[face][dimension];\r\n        if (result != null) {\r\n            iterationTotal += result != null ? result : 0;\r\n        }\r\n    }\r\n    return iterationTotal;\r\n}\r\n\r\nexport function generateRoll(\r\n    activeDice: Dice[],\r\n    randomSeed: RandomSeed\r\n): Face[] {\r\n    const rolls: any[] = [];\r\n    activeDice.forEach((item, index) => {\r\n        rolls.push(item.roll(randomSeed));\r\n    });\r\n    return rolls;\r\n}\r\n","import React from \"react\";\r\nimport { Dice, Face } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { DiceResult } from \"./DiceResult\";\r\nimport { PrimaryButton } from \"office-ui-fabric-react\";\r\nimport { getGlyph } from \"../DiceModel/DieGlyphs\";\r\nimport \"./DiceRoll.css\";\r\n\r\nimport {\r\n    RollOutcome,\r\n    getValuesOfDimension,\r\n    getDimensions,\r\n} from \"../DiceModel/RollingModel\";\r\n\r\ninterface DiceRollProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n    onRemove: (index: number) => void;\r\n}\r\n\r\nexport interface DiceRollState {\r\n    faces: Face[];\r\n}\r\n\r\nexport class DiceRoll extends React.Component<DiceRollProps, DiceRollState> {\r\n    public constructor(props: DiceRollProps) {\r\n        super(props);\r\n        this.state = { faces: [] };\r\n    }\r\n\r\n    public componentWillReceiveProps(newProps: DiceRollProps) {\r\n        if (newProps !== this.props) {\r\n            this.rollFaces(newProps);\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const content: JSX.Element[] = [];\r\n        this.state.faces.forEach((face, index) => {\r\n            content.push(\r\n                <DiceResult\r\n                    face={this.state.faces[index]}\r\n                    dice={this.props.activeDice[index]}\r\n                    key={index}\r\n                    id={index}\r\n                    onClick={this.props.onRemove}\r\n                />\r\n            );\r\n        });\r\n        return (\r\n            <>\r\n                <div className=\"dice-roll flex-row\">{content}</div>\r\n                {this.outcome()}\r\n\r\n                {this.props.activeDice.length > 0 && (\r\n                    <PrimaryButton onClick={this.onClick} text=\"Re-Roll\" />\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    private outcome(): JSX.Element {\r\n        const outcome: RollOutcome = {\r\n            rollOutCome: this.state.faces,\r\n        };\r\n\r\n        const dimensions = getDimensions([outcome]);\r\n        const results = [];\r\n        for (let dimension = 0; dimension < dimensions.length; dimension++) {\r\n            const dimensionName = dimensions[dimension];\r\n            const count = getValuesOfDimension(this.state.faces, dimensionName);\r\n            results.push(\r\n                <div key={dimension}>\r\n                    <span>\r\n                        {getGlyph(dimensionName, count)} {dimensionName}{\" \"}\r\n                    </span>\r\n                    <span>{count}</span>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <br />\r\n                Outcome Dimensions:{results}\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onClick = (): void => {\r\n        this.rollFaces(this.props);\r\n    };\r\n\r\n    private rollFaces(props: DiceRollProps): void {\r\n        const faces: Face[] = [];\r\n        props.activeDice.forEach((dice, index) => {\r\n            faces.push(this.rollDice(dice));\r\n        });\r\n        this.setState({ faces: faces });\r\n    }\r\n\r\n    private rollDice(dice: Dice): Face {\r\n        const options = dice.getSides();\r\n        const selection = this.props.randomSeed.range(options.length);\r\n        return options[selection];\r\n    }\r\n}\r\n","import { Bar } from \"react-chartjs-2\";\r\nimport React from \"react\";\r\n\r\nexport interface HistogramChartProps {\r\n    items: number[];\r\n    iterations: number;\r\n}\r\nexport class HistogramChart extends React.Component<HistogramChartProps> {\r\n    public render(): JSX.Element {\r\n        const labels = [];\r\n        const datasets = [];\r\n        const values: number[] = [];\r\n        const accum: number[] = [];\r\n\r\n        let accumulator = 0;\r\n\r\n        const keys = Object.keys(this.props.items).sort((a, b) => {\r\n            return parseInt(a) - parseInt(b);\r\n        });\r\n        for (const i of keys) {\r\n            labels.push(i + \"\");\r\n            const j = parseInt(i);\r\n            const value =\r\n                this.props.items[j] != null\r\n                    ? this.props.items[j] / this.props.iterations\r\n                    : 0;\r\n            accumulator += value;\r\n            values.push(value);\r\n            accum.push(accumulator);\r\n        }\r\n\r\n        datasets.push({\r\n            label: \"Probability\",\r\n            data: values,\r\n            yAxisID: \"A\",\r\n            backgroundColor: \"rgb(200, 200, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        datasets.push({\r\n            label: \"CDF\",\r\n            data: accum,\r\n            yAxisID: \"B\",\r\n            type: \"line\",\r\n            backgroundColor: \"rgb(255, 255, 255)\",\r\n            borderColor: \"rgb(128, 128, 128)\",\r\n        });\r\n        const chartOptions = {\r\n            maintainAspectRatio: false,\r\n            animation: false,\r\n            scales: {\r\n                yAxes: [\r\n                    {\r\n                        id: \"A\",\r\n                        type: \"linear\",\r\n                        position: \"left\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                    {\r\n                        id: \"B\",\r\n                        type: \"linear\",\r\n                        position: \"right\",\r\n                        ticks: {\r\n                            min: 0,\r\n                        },\r\n                    },\r\n                ],\r\n            },\r\n        } as Chart.ChartOptions;\r\n        return (\r\n            <div style={{ height: \"250px\" }}>\r\n                <Bar\r\n                    options={chartOptions}\r\n                    data={{\r\n                        labels: labels,\r\n                        datasets: datasets,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { CacheableOperation } from \"./ResultCache\";\r\n\r\nexport interface OperationConstructor<T, K> {\r\n  new (params: K): T;\r\n}\r\n\r\nexport class OperationFactory {\r\n  private cache: { [key: string]: OperationConstructor<any, any> };\r\n  private static instance: OperationFactory;\r\n  constructor() {\r\n    this.cache = {};\r\n  }\r\n\r\n  public static getInstance(): OperationFactory {\r\n    if (OperationFactory.instance) {\r\n      return OperationFactory.instance;\r\n    } else {\r\n      OperationFactory.instance = new OperationFactory();\r\n      return OperationFactory.instance;\r\n    }\r\n  }\r\n\r\n  public RegisterConstructor(\r\n    operationName: string,\r\n    constructor: OperationConstructor<any, any>\r\n  ): void {\r\n    this.cache[operationName] = constructor;\r\n  }\r\n\r\n  public getConstructor(operationName: string): OperationConstructor<any, any> {\r\n    return this.cache[operationName];\r\n  }\r\n\r\n  public instantiate<K>(\r\n    operationName: string,\r\n    params: K\r\n  ): CacheableOperation<any, K> {\r\n    return new this.cache[operationName](params);\r\n  }\r\n}\r\n","import { OperationFactory } from \"./OperationFactory\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DiceFactory } from \"../DiceModel/index\";\r\nimport {\r\n    Histogram,\r\n    RollOutcome,\r\n    generateRoll,\r\n    getDimensions,\r\n    getHistograms,\r\n} from \"../DiceModel/RollingModel\";\r\nimport { CacheableOperation, OperationResultCache } from \"./ResultCache\";\r\nimport { create } from \"random-seed\";\r\n\r\nexport interface DiceRollOutcome {\r\n    dimensions: string[];\r\n    histograms: Histogram[];\r\n    rollOutComes: RollOutcome[];\r\n}\r\n\r\nexport interface DiceRollParams {\r\n    diceKinds: string[];\r\n    iterationsCount: number;\r\n    randomSeed: string;\r\n}\r\n\r\nexport class DiceRollOperation\r\n    implements CacheableOperation<DiceRollOutcome, DiceRollParams> {\r\n    private params: DiceRollParams;\r\n    public static Name = \"DiceRollOperation\";\r\n\r\n    public constructor(params: DiceRollParams) {\r\n        this.params = params;\r\n    }\r\n\r\n    public getKey() {\r\n        return this.getType() + JSON.stringify(this.getParams());\r\n    }\r\n    public getType(): string {\r\n        return DiceRollOperation.Name;\r\n    }\r\n\r\n    public getParams(): DiceRollParams {\r\n        return this.params;\r\n    }\r\n\r\n    async runOperation(\r\n        queryResultCache: OperationResultCache\r\n    ): Promise<DiceRollOutcome> {\r\n        const rollOutcomes: RollOutcome[] = [];\r\n\r\n        const randomSeed = create(this.params.randomSeed);\r\n        const dice: Dice[] = [];\r\n        const diceKinds = DiceFactory.getInstance().getDice();\r\n        if (this.params.diceKinds.length > 0) {\r\n            for (let index = 0; index < this.params.diceKinds.length; index++) {\r\n                dice.push(diceKinds[this.params.diceKinds[index]]);\r\n            }\r\n            for (let index = 0; index < this.params.iterationsCount; index++) {\r\n                const rollOutCome = generateRoll(dice, randomSeed);\r\n                rollOutcomes[index] = {\r\n                    rollOutCome: rollOutCome,\r\n                };\r\n            }\r\n        }\r\n\r\n        const dimensions = getDimensions(rollOutcomes);\r\n        const histograms = getHistograms(rollOutcomes, dimensions);\r\n        return {\r\n            dimensions: dimensions,\r\n            histograms: histograms,\r\n            rollOutComes: rollOutcomes,\r\n        };\r\n    }\r\n}\r\n\r\nOperationFactory.getInstance().RegisterConstructor(\r\n    DiceRollOperation.Name,\r\n    DiceRollOperation\r\n);\r\n","/* eslint import/no-webpack-loader-syntax: off */\r\nimport LocalWorker from \"worker-loader!./workers/worker\";\r\nimport { CacheableOperation } from \"./OperationModel/ResultCache\";\r\n\r\n// WorkClient.ts\r\nexport class WorkClient {\r\n    private worker: LocalWorker;\r\n    private static instance: WorkClient;\r\n    private id = 0;\r\n\r\n    private constructor() {\r\n        this.worker = new LocalWorker();\r\n    }\r\n\r\n    public static getInstance(): WorkClient {\r\n        if (WorkClient.instance === undefined) {\r\n            WorkClient.instance = new WorkClient();\r\n        }\r\n        return WorkClient.instance;\r\n    }\r\n\r\n    public async runOperation<T>(\r\n        operation: CacheableOperation<T, any>\r\n    ): Promise<T> {\r\n        const id = this.id++;\r\n        // Respond to message from parent thread\r\n        const payload = {\r\n            type: operation.getType(),\r\n            params: operation.getParams(),\r\n            id: id,\r\n        };\r\n\r\n        const promise = new Promise((resolve, reject) => {\r\n            const handler = (response: any) => {\r\n                if (response.type === \"message\" && response.data.id === id) {\r\n                    const parsedResponse = JSON.parse(response.data.result);\r\n                    resolve(parsedResponse);\r\n                    this.worker.removeEventListener(\"message\", handler);\r\n                }\r\n            };\r\n            this.worker.addEventListener(\"message\", handler);\r\n        });\r\n\r\n        this.worker.postMessage(payload);\r\n\r\n        return promise as Promise<T>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { RandomSeed } from \"random-seed\";\r\nimport { HistogramChart } from \"./HistogramChart\";\r\nimport { Spinner } from \"office-ui-fabric-react/lib/Spinner\";\r\nimport { Histogram, RollOutcome } from \"../DiceModel/RollingModel\";\r\nimport {\r\n    DiceRollOperation,\r\n    DiceRollParams,\r\n} from \"../OperationModel/DiceRollOperation\";\r\nimport { WorkClient } from \"../WorkClient\";\r\n\r\ninterface ProbabilitiesViewProps {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n    iterations: number;\r\n}\r\ninterface ProbabilitiesViewState {\r\n    rollOutcomes: RollOutcome[];\r\n    histograms: Histogram[];\r\n    regenerating: boolean;\r\n}\r\n\r\nexport class ProbabilitiesView extends React.Component<\r\n    ProbabilitiesViewProps,\r\n    ProbabilitiesViewState\r\n> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            rollOutcomes: [],\r\n            histograms: [],\r\n            regenerating: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        this.regenerate();\r\n    }\r\n\r\n    public componentDidUpdate(newProps: ProbabilitiesViewProps) {\r\n        if (newProps !== this.props) {\r\n            this.regenerate();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return <>{this.state.histograms && this.renderCharts()}</>;\r\n    }\r\n\r\n    private renderCharts(): JSX.Element[] {\r\n        const elements: JSX.Element[] = [];\r\n\r\n        if (this.state.regenerating) {\r\n            elements.push(<Spinner key={0} />);\r\n        }\r\n\r\n        for (const key in this.state.histograms) {\r\n            if (this.state.histograms.hasOwnProperty(key)) {\r\n                const element = this.state.histograms[key];\r\n\r\n                elements.push(\r\n                    <div key={key}>\r\n                        <span>{element.name}</span>\r\n                        <HistogramChart\r\n                            items={element.data}\r\n                            iterations={this.props.iterations}\r\n                        />\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return elements;\r\n    }\r\n\r\n    private async regenerate() {\r\n        const params: DiceRollParams = {\r\n            diceKinds: this.props.activeDice.map(item => {\r\n                return item.getKey();\r\n            }),\r\n            randomSeed: \" 123\",\r\n            iterationsCount: this.props.iterations,\r\n        };\r\n\r\n        const client = WorkClient.getInstance();\r\n        const result = await client.runOperation(new DiceRollOperation(params));\r\n\r\n        this.setState({\r\n            rollOutcomes: result.rollOutComes,\r\n            histograms: result.histograms,\r\n            regenerating: false,\r\n        });\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { DicePicker } from \"./DicePicker\";\r\nimport { Dice } from \"../DiceModel/index\";\r\nimport { DiceRoll } from \"./DiceRoll\";\r\nimport { ProbabilitiesView } from \"./ProbabilitiesView\";\r\nimport { RandomSeed, create } from \"random-seed\";\r\n\r\ninterface ViewState {\r\n    activeDice: Dice[];\r\n    randomSeed: RandomSeed;\r\n}\r\nexport class View extends React.Component<any, ViewState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            activeDice: [],\r\n            randomSeed: create(\"0\"),\r\n        };\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <DicePicker onAdd={this.onAddDice} />\r\n                <DiceRoll\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    onRemove={this.onRemoveDice}\r\n                />\r\n                <ProbabilitiesView\r\n                    activeDice={this.state.activeDice as any}\r\n                    randomSeed={this.state.randomSeed}\r\n                    iterations={50000}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    public onAddDice = (dice: Dice): void => {\r\n        this.state.activeDice.push(dice);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n\r\n    public onRemoveDice = (index: number): void => {\r\n        this.state.activeDice.splice(index, 1);\r\n        this.setState({ activeDice: this.state.activeDice });\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./common.css\";\r\nimport { View } from \"./UI/View\";\r\n\r\nclass App extends React.Component<any, any> {\r\n    public render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <View />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\n\r\ninitializeIcons(/* optional base url */);\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class SWRPG_Difficulty extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Difficulty\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Difficulty\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#8800AA\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"triangle\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {},\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n                success: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Ability extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Ability\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Ability\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#00D400\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"triangle\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Proficiency extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Proficiency\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Proficiency\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#FFEA01\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                triumph: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n                advantage: 1,\r\n            },\r\n            {\r\n                success: 2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Challenge extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Challenge\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Challenge\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"red\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -2,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {\r\n                despair: 1,\r\n            },\r\n            {\r\n                success: -2,\r\n            },\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Force extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Force\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Force\";\r\n    }\r\n\r\n    public getShape(): string {\r\n        return \"pentagon\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#EFEFEF\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                light: 1,\r\n            },\r\n            {\r\n                dark: 2,\r\n            },\r\n            {\r\n                dark: 1,\r\n            },\r\n            {\r\n                light: 2,\r\n            },\r\n            {\r\n                dark: 1,\r\n            },\r\n            {\r\n                light: 2,\r\n            },\r\n            {\r\n                dark: 1,\r\n            },\r\n            {\r\n                light: 1,\r\n            },\r\n            {\r\n                dark: 1,\r\n            },\r\n            {\r\n                light: 2,\r\n            },\r\n            {\r\n                dark: 1,\r\n            },\r\n            {\r\n                dark: 2,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Setback extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Setback\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Setback\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"black\";\r\n    }\r\n\r\n    public getForegroundColor(): string {\r\n        return \"white\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                advantage: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {\r\n                success: -1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n\r\nexport class SWRPG_Boost extends DiceBase {\r\n    getKey(): string {\r\n        return \"SWRPG_Boost\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"SWRPG - Boost\";\r\n    }\r\n\r\n    public getBackgroundColor(): string {\r\n        return \"#ABDEF7\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                advantage: 1,\r\n                success: 1,\r\n            },\r\n            {\r\n                advantage: 1,\r\n            },\r\n            {\r\n                advantage: 2,\r\n            },\r\n            {\r\n                success: 1,\r\n            },\r\n            {},\r\n            {},\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { D2 } from \"./D2\";\r\nimport { D3 } from \"./D3\";\r\nimport { D4 } from \"./D4\";\r\nimport { D6 } from \"./D6\";\r\nimport { D8 } from \"./D8\";\r\nimport { D10 } from \"./D10\";\r\nimport { D20 } from \"./D20\";\r\nimport { D100 } from \"./D100\";\r\nimport {\r\n    SWRPG_Difficulty,\r\n    SWRPG_Ability,\r\n    SWRPG_Boost,\r\n    SWRPG_Challenge,\r\n    SWRPG_Force,\r\n    SWRPG_Proficiency,\r\n    SWRPG_Setback,\r\n} from \"./SWRPG\";\r\nimport { DiceFactory } from \"./DiceFactory\";\r\n\r\nexport { DiceFactory };\r\nexport * from \"./IDice\";\r\n\r\nDiceFactory.getInstance().RegisterDice(D2);\r\nDiceFactory.getInstance().RegisterDice(D3);\r\nDiceFactory.getInstance().RegisterDice(D6);\r\nDiceFactory.getInstance().RegisterDice(D4);\r\nDiceFactory.getInstance().RegisterDice(D8);\r\nDiceFactory.getInstance().RegisterDice(D10);\r\nDiceFactory.getInstance().RegisterDice(D20);\r\nDiceFactory.getInstance().RegisterDice(D100);\r\n\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Difficulty);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Ability);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Boost);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Challenge);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Force);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Proficiency);\r\nDiceFactory.getInstance().RegisterDice(SWRPG_Setback);\r\n","import { Face } from \"./IDice\";\r\nimport { DiceBase } from \"./DiceBase\";\r\n\r\nexport class D2 extends DiceBase {\r\n    getKey(): string {\r\n        return \"D2\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Coin\";\r\n    }\r\n\r\n    public getSides(): Face[] {\r\n        const set: Face[] = [\r\n            {\r\n                value: 0,\r\n            },\r\n            {\r\n                value: 1,\r\n            },\r\n        ];\r\n        return set;\r\n    }\r\n}\r\n","import { NumericDice } from \"./DiceBase\";\r\n\r\nexport class D3 extends NumericDice {\r\n    getKey(): string {\r\n        return \"D3\";\r\n    }\r\n\r\n    getName(): string {\r\n        return \"Three Sided Die\";\r\n    }\r\n\r\n    getFaceCount(): number {\r\n        return 3;\r\n    }\r\n}\r\n"],"sourceRoot":""}